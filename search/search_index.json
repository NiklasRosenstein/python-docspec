{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Docspec documentation! Docspec is a JSON object specification for representing API documentation of programming languages. While in it's current form it is targeting Python APIs, it is intended to be able to represent other programming languages in the future as well What is...? docspec The reference implementation for reading/writing the JSON format and API for representing API objects in memory. >> View the Specification . docspec-python A parser for Python packages and modules based on lib2to3 producing docspec API object representations. >> View the Documentation Projects using docspec Pydoc-Markdown \u2013 The original spark for Docspec. Copyright \u00a9 2021, Niklas Rosenstein","title":"Welcome to the Docspec documentation!"},{"location":"#welcome-to-the-docspec-documentation","text":"Docspec is a JSON object specification for representing API documentation of programming languages. While in it's current form it is targeting Python APIs, it is intended to be able to represent other programming languages in the future as well","title":"Welcome to the Docspec documentation!"},{"location":"#what-is","text":"docspec The reference implementation for reading/writing the JSON format and API for representing API objects in memory. >> View the Specification . docspec-python A parser for Python packages and modules based on lib2to3 producing docspec API object representations. >> View the Documentation","title":"What is...?"},{"location":"#projects-using-docspec","text":"Pydoc-Markdown \u2013 The original spark for Docspec. Copyright \u00a9 2021, Niklas Rosenstein","title":"Projects using docspec"},{"location":"specification/","text":"Specification $ scripts/render-spec ../docspec/specification.yml # exited with return code 1 Traceback (most recent call last): File \"/home/runner/work/docspec/docspec/docs/scripts/render-spec\", line 10, in <module> from databind.core.settings import Union ModuleNotFoundError: No module named 'databind.core.settings'","title":"Specification"},{"location":"specification/#specification","text":"$ scripts/render-spec ../docspec/specification.yml # exited with return code 1 Traceback (most recent call last): File \"/home/runner/work/docspec/docspec/docs/scripts/render-spec\", line 10, in <module> from databind.core.settings import Union ModuleNotFoundError: No module named 'databind.core.settings'","title":"Specification"},{"location":"api/docspec-python/","text":"load_python_modules def load_python_modules ( modules : t . Sequence [ str ] = None , packages : t . Sequence [ str ] = None , search_path : t . Sequence [ t . Union [ str , Path ]] = None , options : ParserOptions = None , raise_ : bool = True , encoding : t . Optional [ str ] = None ) -> t . Iterable [ Module ] [view_source] Utility function for loading multiple Modules from a list of Python module and package names. It combines find_module() , iter_package_files() and parse_python_module() in a convenient way. Arguments modules : A list of module names to load and parse. packages : A list of package names to load and parse. search_path : The Python module search path. Falls back to sys.path if omitted. options : Options for the Python module parser. Returns Iterable of Module . parse_python_module def parse_python_module ( fp : t . Union [ str , Path , t . TextIO ], filename : t . Union [ str , Path , None ] = None , module_name : t . Optional [ str ] = None , options : t . Optional [ ParserOptions ] = None , encoding : t . Optional [ str ] = None ) -> Module [view_source] Parses Python code of a file or file-like object and returns a Module object with the contents of the file The options are forwarded to the {@link pydoc:docspec_python.parser.Parser} constructor. find_module def find_module ( module_name : str , search_path : t . Sequence [ t . Union [ str , Path ]] = None ) -> str [view_source] Finds the filename of a module that can be parsed with parse_python_module() . If search_path is not set, the default sys.path is used to search for the module. If module_name is a Python package, it will return the path to the package's __init__.py file. If the module does not exist, an ImportError is raised. This is also true for PEP 420 namespace packages that do not provide an __init__.py file. Raises : ImportError : If the module cannot be found. iter_package_files def iter_package_files ( package_name : str , search_path : t . Sequence [ t . Union [ str , Path ]] = None ) -> t . Iterable [ t . Tuple [ str , str ]] [view_source] Returns an iterator for the Python source files in the specified package. The items returned by the iterator are tuples of the module name and filename. Supports a PEP 420 namespace package if at least one matching directory with at least one Python source file in it is found. discover def discover ( directory : t . Union [ str , Path ]) -> t . Iterable [ DiscoveryResult ] [view_source] Discovers Python modules and packages in the specified directory . The returned generated returns tuples where the first element of the tuple is the type (either 'module' or 'package' ), the second is the name and the third is the path. In case of a package, the path points to the directory. Raises : OSError : Propagated from os.listdir() . format_arglist def format_arglist ( args : t . Sequence [ Argument ], render_type_hints : bool = True ) -> str [view_source] Formats a Python argument list.","title":"docspec-python"},{"location":"api/docspec-python/#load_python_modules","text":"def load_python_modules ( modules : t . Sequence [ str ] = None , packages : t . Sequence [ str ] = None , search_path : t . Sequence [ t . Union [ str , Path ]] = None , options : ParserOptions = None , raise_ : bool = True , encoding : t . Optional [ str ] = None ) -> t . Iterable [ Module ] [view_source] Utility function for loading multiple Modules from a list of Python module and package names. It combines find_module() , iter_package_files() and parse_python_module() in a convenient way. Arguments modules : A list of module names to load and parse. packages : A list of package names to load and parse. search_path : The Python module search path. Falls back to sys.path if omitted. options : Options for the Python module parser. Returns Iterable of Module .","title":"load_python_modules"},{"location":"api/docspec-python/#parse_python_module","text":"def parse_python_module ( fp : t . Union [ str , Path , t . TextIO ], filename : t . Union [ str , Path , None ] = None , module_name : t . Optional [ str ] = None , options : t . Optional [ ParserOptions ] = None , encoding : t . Optional [ str ] = None ) -> Module [view_source] Parses Python code of a file or file-like object and returns a Module object with the contents of the file The options are forwarded to the {@link pydoc:docspec_python.parser.Parser} constructor.","title":"parse_python_module"},{"location":"api/docspec-python/#find_module","text":"def find_module ( module_name : str , search_path : t . Sequence [ t . Union [ str , Path ]] = None ) -> str [view_source] Finds the filename of a module that can be parsed with parse_python_module() . If search_path is not set, the default sys.path is used to search for the module. If module_name is a Python package, it will return the path to the package's __init__.py file. If the module does not exist, an ImportError is raised. This is also true for PEP 420 namespace packages that do not provide an __init__.py file. Raises : ImportError : If the module cannot be found.","title":"find_module"},{"location":"api/docspec-python/#iter_package_files","text":"def iter_package_files ( package_name : str , search_path : t . Sequence [ t . Union [ str , Path ]] = None ) -> t . Iterable [ t . Tuple [ str , str ]] [view_source] Returns an iterator for the Python source files in the specified package. The items returned by the iterator are tuples of the module name and filename. Supports a PEP 420 namespace package if at least one matching directory with at least one Python source file in it is found.","title":"iter_package_files"},{"location":"api/docspec-python/#discover","text":"def discover ( directory : t . Union [ str , Path ]) -> t . Iterable [ DiscoveryResult ] [view_source] Discovers Python modules and packages in the specified directory . The returned generated returns tuples where the first element of the tuple is the type (either 'module' or 'package' ), the second is the name and the third is the path. In case of a package, the path points to the directory. Raises : OSError : Propagated from os.listdir() .","title":"discover"},{"location":"api/docspec-python/#format_arglist","text":"def format_arglist ( args : t . Sequence [ Argument ], render_type_hints : bool = True ) -> str [view_source] Formats a Python argument list.","title":"format_arglist"},{"location":"api/docspec/","text":"Class Location @dataclasses . dataclass class Location () [view_source] Represents the location of an ApiObject by a filename and line number. endlineno If the location of an entity spans over multiple lines, it can be indicated by specifying at which line it ends with this property. Class Docstring @dataclasses . dataclass class Docstring () [view_source] Represents a docstring for an APIObject , i.e. it's content and location. This class is a subclass of str for backwards compatibility reasons. Use the content property to access the docstring content over the Docstring value directory. location The location of where the docstring is defined. content The content of the docstring. While the Docstring class is a subclass of str and holds the same value as content , using the content property should be preferred as the inheritance from the str class may be removed in future versions. Class Decoration @dataclasses . dataclass class Decoration () [view_source] Represents a decorator on a Class or Function . location The location of the decoration in the source code. name The name of the decorator (i.e. the text between the @ and ( ). In languages that support it, this may be a piece of code. args Decorator arguments as plain code (including the leading and trailing parentheses). This is None when the decorator does not have call arguments. This is deprecated in favor of arglist . For backwards compatibility, loaders may populate both the args and arglist fields. arglist Decorator arguments, one item per argument. For keyword arguments, the keyword name and equals sign preceed the argument value expression code. Class Argument @dataclasses . dataclass class Argument () [view_source] Represents a Function argument. Class Type class Type ( enum . Enum ) [view_source] The type of the argument. This is currently very Python-centric, however most other languages should be able to represent the various argument types with a subset of these types without additions (e.g. Java or TypeScript only support Positional and PositionalRemainder arguments). POSITIONAL_ONLY A positional only argument. Such arguments are denoted in Python like this: def foo(a, b, /): ... POSITIONAL A positional argument, which may also be given as a keyword argument. Basically that is just a normal argument as you would see most commonly in Python function definitions. POSITIONAL_REMAINDER An argument that denotes the capture of additional positional arguments, aka. \"args\" or \"varags\". KEYWORD_ONLY A keyword-only argument is denoted in Python like thisL def foo(*, kwonly): ... KEYWORD_REMAINDER An argument that captures additional keyword arguments, aka. \"kwargs\". location The location of the argument in the source code. name The name of the argument. type The argument type. decorations A list of argument decorations. Python does not actually support decorators on function arguments like for example Java does. This is probably premature to add into the API, but hey, here it is. datatype The datatype/type annotation of this argument as a code string. default_value The default value of the argument as a code string. Class ApiObject @dataclasses . dataclass class ApiObject () [view_source] The base class for representing \"API Objects\". Any API object is any addressable entity in code, be that a variable/constant, function, class or module. location The location of the API object, i.e. where it is sourced from/defined in the code. name The name of the entity. This is usually relative to the respective parent of the entity, as opposed to it's fully qualified name/absolute name. However, that is more of a recommendation than rule. For example the docspec_python loader by default returns Module objects with their full module name (and does not create a module hierarchy). docstring The documentation string of the API object. parent @property def parent () -> t . Optional [ 'HasMembers' ] [view_source] Returns the parent of the HasMembers . Note that if you make any modifications to the API object tree, you will need to call sync_hierarchy() afterwards because adding to Class.members or Module.members does not automatically keep the parent property in sync. path @property def path () -> t . List [ 'ApiObject' ] [view_source] Returns a list of all of this API object's parents, from top to bottom. The list includes self as the last item. sync_hierarchy def sync_hierarchy ( parent : t . Optional [ 'HasMembers' ] = None ) -> None [view_source] Synchronize the hierarchy of this API object and all of it's children. This should be called when the HasMembers.members are updated to ensure that all child objects reference the right parent . Loaders are expected to return ApiObjects in a fully synchronized state such that the user does not have to call this method unless they are doing modifications to the tree. Class VariableSemantic class VariableSemantic ( enum . Enum ) [view_source] A list of well-known properties and behaviour that can be attributed to a variable/constant. INSTANCE_VARIABLE The Variable object is an instance variable of a class. CLASS_VARIABLE The Variable object is a static variable of a class. CONSTANT The Variable object represents a constant value. Class Variable @dataclasses . dataclass class Variable ( ApiObject ) [view_source] Represents a variable assignment (e.g. for global variables (often used as constants) or class members). datatype The datatype associated with the assignment as code. value The value of the variable as code. modifiers A list of language-specific modifiers that were used to declare this Variable object. semantic_hints A list of hints that express semantics of this Variable object which are not otherwise derivable from the context. Class Indirection @dataclasses . dataclass class Indirection ( ApiObject ) [view_source] Represents an imported name. It can be used to properly find the full name target of a link written with a local name. Class FunctionSemantic class FunctionSemantic ( enum . Enum ) [view_source] A list of well-known properties and behaviour that can be attributed to a function. ABSTRACT The function is abstract. FINAL The function is final. COROUTINE The function is a coroutine. NO_RETURN The function does not return. INSTANCE_METHOD The function is an instance method. CLASS_METHOD The function is a classmethod. STATIC_METHOD The function is a staticmethod. PROPERTY_GETTER The function is a property getter. PROPERTY_SETTER The function is a property setter. PROPERTY_DELETER The function is a property deleter. Class Function @dataclasses . dataclass class Function ( ApiObject ) [view_source] Represents a function definition. This can be in a Module for plain functions or in a Class for methods. The decorations need to be introspected to understand if the function has a special purpose (e.g. is it a @property , @classmethod or @staticmethod ?). modifiers A list of modifiers used in the function definition. For example, the only valid modifier in Python is \"async\". args A list of the function arguments. return_type The return type of the function as a code string. decorations A list of decorations used on the function. semantic_hints A list of hints that describe the object. Class HasMembers class HasMembers ( ApiObject ) [view_source] Base class for API objects that can have members, e.g. Class and Module . members The members of the API object. Class ClassSemantic class ClassSemantic ( enum . Enum ) [view_source] A list of well-known properties and behaviour that can be attributed to a class. INTERFACE The class describes an interface. ABSTRACT The class is abstract. FINAL The class is final. ENUM The class is an enumeration. Class Class @dataclasses . dataclass class Class ( HasMembers ) [view_source] Represents a class definition. metaclass The metaclass used in the class definition as a code string. bases The list of base classes as code strings. decorations A list of decorations used in the class definition. members A list of the classes members. Functions in a class are to be considered instance methods of that class unless some information about the Function indicates otherwise. modifiers A list of language-specific modifiers that were used to declare this Variable object. semantic_hints A list of hints that describe the object. Class Module @dataclasses . dataclass class Module ( HasMembers ) [view_source] Represents a module, basically a named container for code/API objects. Modules may be nested in other modules. Be aware that for historical reasons, some loaders lile docspec_python by default do not return nested modules, even if nesting would be appropriate (and instead the Module.name simply contains the fully qualified name). members A list of module members. load_module def load_module ( source : t . Union [ str , t . TextIO , t . Dict [ str , t . Any ]], filename : t . Optional [ str ] = None , loader : t . Callable [[ t . IO [ str ]], t . Any ] = json . load ) -> Module [view_source] Loads a Module from the specified source , which may be either a filename, a file-like object to read from or plain structured data. Arguments source : The JSON source to load the module from. filename : The name of the source. This will be displayed in error messages if the deserialization fails. loader : A function for loading plain structured data from a file-like object. Defaults to json.load() . Returns The loaded Module object. load_modules def load_modules ( source : t . Union [ str , t . TextIO , t . Iterable [ t . Any ]], filename : t . Optional [ str ] = None , loader : t . Callable [[ t . IO [ str ]], t . Any ] = json . load ) -> t . Iterable [ Module ] [view_source] Loads a stream of modules from the specified source . Similar to load_module() , the source can be a filename, file-like object or a list of plain structured data to deserialize from. dump_module def dump_module ( module : Module , target : t . Optional [ t . Union [ str , t . IO [ str ]]] = None , dumper : t . Callable [[ t . Any , t . IO [ str ]], None ] = json . dump ) -> t . Optional [ t . Dict [ str , t . Any ]] [view_source] Dumps a module to the specified target or returns it as plain structured data. filter_visit def filter_visit ( objects : t . MutableSequence [ ApiObject ], predicate : t . Callable [[ ApiObject ], bool ], order : str = 'pre' ) -> t . MutableSequence [ ApiObject ] [view_source] Visits all objects recursively, applying the predicate in the specified order . If the predicate returrns False , the object will be removed from it's containing list. If an object is removed in pre-order, it's members will not be visited. Arguments : objects : A list of objects to visit recursively. This list will be modified if the predicate returns False for an object. predicate : The function to apply over all visited objects. order : The order in which the objects are visited. The default order is 'pre' in which case the predicate is called before visiting the object's members. The order may also be 'post' . visit def visit ( objects : t . Sequence [ ApiObject ], func : t . Callable [[ ApiObject ], t . Any ], order : str = 'pre' ) -> None [view_source] Visits all objects , applying func in the specified order . get_member def get_member ( obj : ApiObject , name : str ) -> t . Optional [ ApiObject ] [view_source] Generic function to retrieve a member from an API object. This will always return None for objects that don't support members (eg. Function and Variable ).","title":"docspec"},{"location":"api/docspec/#class-location","text":"@dataclasses . dataclass class Location () [view_source] Represents the location of an ApiObject by a filename and line number.","title":"Class Location"},{"location":"api/docspec/#endlineno","text":"If the location of an entity spans over multiple lines, it can be indicated by specifying at which line it ends with this property.","title":"endlineno"},{"location":"api/docspec/#class-docstring","text":"@dataclasses . dataclass class Docstring () [view_source] Represents a docstring for an APIObject , i.e. it's content and location. This class is a subclass of str for backwards compatibility reasons. Use the content property to access the docstring content over the Docstring value directory.","title":"Class Docstring"},{"location":"api/docspec/#location","text":"The location of where the docstring is defined.","title":"location"},{"location":"api/docspec/#content","text":"The content of the docstring. While the Docstring class is a subclass of str and holds the same value as content , using the content property should be preferred as the inheritance from the str class may be removed in future versions.","title":"content"},{"location":"api/docspec/#class-decoration","text":"@dataclasses . dataclass class Decoration () [view_source] Represents a decorator on a Class or Function .","title":"Class Decoration"},{"location":"api/docspec/#location_1","text":"The location of the decoration in the source code.","title":"location"},{"location":"api/docspec/#name","text":"The name of the decorator (i.e. the text between the @ and ( ). In languages that support it, this may be a piece of code.","title":"name"},{"location":"api/docspec/#args","text":"Decorator arguments as plain code (including the leading and trailing parentheses). This is None when the decorator does not have call arguments. This is deprecated in favor of arglist . For backwards compatibility, loaders may populate both the args and arglist fields.","title":"args"},{"location":"api/docspec/#arglist","text":"Decorator arguments, one item per argument. For keyword arguments, the keyword name and equals sign preceed the argument value expression code.","title":"arglist"},{"location":"api/docspec/#class-argument","text":"@dataclasses . dataclass class Argument () [view_source] Represents a Function argument.","title":"Class Argument"},{"location":"api/docspec/#class-type","text":"class Type ( enum . Enum ) [view_source] The type of the argument. This is currently very Python-centric, however most other languages should be able to represent the various argument types with a subset of these types without additions (e.g. Java or TypeScript only support Positional and PositionalRemainder arguments).","title":"Class Type"},{"location":"api/docspec/#positional_only","text":"A positional only argument. Such arguments are denoted in Python like this: def foo(a, b, /): ...","title":"POSITIONAL_ONLY"},{"location":"api/docspec/#positional","text":"A positional argument, which may also be given as a keyword argument. Basically that is just a normal argument as you would see most commonly in Python function definitions.","title":"POSITIONAL"},{"location":"api/docspec/#positional_remainder","text":"An argument that denotes the capture of additional positional arguments, aka. \"args\" or \"varags\".","title":"POSITIONAL_REMAINDER"},{"location":"api/docspec/#keyword_only","text":"A keyword-only argument is denoted in Python like thisL def foo(*, kwonly): ...","title":"KEYWORD_ONLY"},{"location":"api/docspec/#keyword_remainder","text":"An argument that captures additional keyword arguments, aka. \"kwargs\".","title":"KEYWORD_REMAINDER"},{"location":"api/docspec/#location_2","text":"The location of the argument in the source code.","title":"location"},{"location":"api/docspec/#name_1","text":"The name of the argument.","title":"name"},{"location":"api/docspec/#type","text":"The argument type.","title":"type"},{"location":"api/docspec/#decorations","text":"A list of argument decorations. Python does not actually support decorators on function arguments like for example Java does. This is probably premature to add into the API, but hey, here it is.","title":"decorations"},{"location":"api/docspec/#datatype","text":"The datatype/type annotation of this argument as a code string.","title":"datatype"},{"location":"api/docspec/#default_value","text":"The default value of the argument as a code string.","title":"default_value"},{"location":"api/docspec/#class-apiobject","text":"@dataclasses . dataclass class ApiObject () [view_source] The base class for representing \"API Objects\". Any API object is any addressable entity in code, be that a variable/constant, function, class or module.","title":"Class ApiObject"},{"location":"api/docspec/#location_3","text":"The location of the API object, i.e. where it is sourced from/defined in the code.","title":"location"},{"location":"api/docspec/#name_2","text":"The name of the entity. This is usually relative to the respective parent of the entity, as opposed to it's fully qualified name/absolute name. However, that is more of a recommendation than rule. For example the docspec_python loader by default returns Module objects with their full module name (and does not create a module hierarchy).","title":"name"},{"location":"api/docspec/#docstring","text":"The documentation string of the API object.","title":"docstring"},{"location":"api/docspec/#parent","text":"@property def parent () -> t . Optional [ 'HasMembers' ] [view_source] Returns the parent of the HasMembers . Note that if you make any modifications to the API object tree, you will need to call sync_hierarchy() afterwards because adding to Class.members or Module.members does not automatically keep the parent property in sync.","title":"parent"},{"location":"api/docspec/#path","text":"@property def path () -> t . List [ 'ApiObject' ] [view_source] Returns a list of all of this API object's parents, from top to bottom. The list includes self as the last item.","title":"path"},{"location":"api/docspec/#sync_hierarchy","text":"def sync_hierarchy ( parent : t . Optional [ 'HasMembers' ] = None ) -> None [view_source] Synchronize the hierarchy of this API object and all of it's children. This should be called when the HasMembers.members are updated to ensure that all child objects reference the right parent . Loaders are expected to return ApiObjects in a fully synchronized state such that the user does not have to call this method unless they are doing modifications to the tree.","title":"sync_hierarchy"},{"location":"api/docspec/#class-variablesemantic","text":"class VariableSemantic ( enum . Enum ) [view_source] A list of well-known properties and behaviour that can be attributed to a variable/constant.","title":"Class VariableSemantic"},{"location":"api/docspec/#instance_variable","text":"The Variable object is an instance variable of a class.","title":"INSTANCE_VARIABLE"},{"location":"api/docspec/#class_variable","text":"The Variable object is a static variable of a class.","title":"CLASS_VARIABLE"},{"location":"api/docspec/#constant","text":"The Variable object represents a constant value.","title":"CONSTANT"},{"location":"api/docspec/#class-variable","text":"@dataclasses . dataclass class Variable ( ApiObject ) [view_source] Represents a variable assignment (e.g. for global variables (often used as constants) or class members).","title":"Class Variable"},{"location":"api/docspec/#datatype_1","text":"The datatype associated with the assignment as code.","title":"datatype"},{"location":"api/docspec/#value","text":"The value of the variable as code.","title":"value"},{"location":"api/docspec/#modifiers","text":"A list of language-specific modifiers that were used to declare this Variable object.","title":"modifiers"},{"location":"api/docspec/#semantic_hints","text":"A list of hints that express semantics of this Variable object which are not otherwise derivable from the context.","title":"semantic_hints"},{"location":"api/docspec/#class-indirection","text":"@dataclasses . dataclass class Indirection ( ApiObject ) [view_source] Represents an imported name. It can be used to properly find the full name target of a link written with a local name.","title":"Class Indirection"},{"location":"api/docspec/#class-functionsemantic","text":"class FunctionSemantic ( enum . Enum ) [view_source] A list of well-known properties and behaviour that can be attributed to a function.","title":"Class FunctionSemantic"},{"location":"api/docspec/#abstract","text":"The function is abstract.","title":"ABSTRACT"},{"location":"api/docspec/#final","text":"The function is final.","title":"FINAL"},{"location":"api/docspec/#coroutine","text":"The function is a coroutine.","title":"COROUTINE"},{"location":"api/docspec/#no_return","text":"The function does not return.","title":"NO_RETURN"},{"location":"api/docspec/#instance_method","text":"The function is an instance method.","title":"INSTANCE_METHOD"},{"location":"api/docspec/#class_method","text":"The function is a classmethod.","title":"CLASS_METHOD"},{"location":"api/docspec/#static_method","text":"The function is a staticmethod.","title":"STATIC_METHOD"},{"location":"api/docspec/#property_getter","text":"The function is a property getter.","title":"PROPERTY_GETTER"},{"location":"api/docspec/#property_setter","text":"The function is a property setter.","title":"PROPERTY_SETTER"},{"location":"api/docspec/#property_deleter","text":"The function is a property deleter.","title":"PROPERTY_DELETER"},{"location":"api/docspec/#class-function","text":"@dataclasses . dataclass class Function ( ApiObject ) [view_source] Represents a function definition. This can be in a Module for plain functions or in a Class for methods. The decorations need to be introspected to understand if the function has a special purpose (e.g. is it a @property , @classmethod or @staticmethod ?).","title":"Class Function"},{"location":"api/docspec/#modifiers_1","text":"A list of modifiers used in the function definition. For example, the only valid modifier in Python is \"async\".","title":"modifiers"},{"location":"api/docspec/#args_1","text":"A list of the function arguments.","title":"args"},{"location":"api/docspec/#return_type","text":"The return type of the function as a code string.","title":"return_type"},{"location":"api/docspec/#decorations_1","text":"A list of decorations used on the function.","title":"decorations"},{"location":"api/docspec/#semantic_hints_1","text":"A list of hints that describe the object.","title":"semantic_hints"},{"location":"api/docspec/#class-hasmembers","text":"class HasMembers ( ApiObject ) [view_source] Base class for API objects that can have members, e.g. Class and Module .","title":"Class HasMembers"},{"location":"api/docspec/#members","text":"The members of the API object.","title":"members"},{"location":"api/docspec/#class-classsemantic","text":"class ClassSemantic ( enum . Enum ) [view_source] A list of well-known properties and behaviour that can be attributed to a class.","title":"Class ClassSemantic"},{"location":"api/docspec/#interface","text":"The class describes an interface.","title":"INTERFACE"},{"location":"api/docspec/#abstract_1","text":"The class is abstract.","title":"ABSTRACT"},{"location":"api/docspec/#final_1","text":"The class is final.","title":"FINAL"},{"location":"api/docspec/#enum","text":"The class is an enumeration.","title":"ENUM"},{"location":"api/docspec/#class-class","text":"@dataclasses . dataclass class Class ( HasMembers ) [view_source] Represents a class definition.","title":"Class Class"},{"location":"api/docspec/#metaclass","text":"The metaclass used in the class definition as a code string.","title":"metaclass"},{"location":"api/docspec/#bases","text":"The list of base classes as code strings.","title":"bases"},{"location":"api/docspec/#decorations_2","text":"A list of decorations used in the class definition.","title":"decorations"},{"location":"api/docspec/#members_1","text":"A list of the classes members. Functions in a class are to be considered instance methods of that class unless some information about the Function indicates otherwise.","title":"members"},{"location":"api/docspec/#modifiers_2","text":"A list of language-specific modifiers that were used to declare this Variable object.","title":"modifiers"},{"location":"api/docspec/#semantic_hints_2","text":"A list of hints that describe the object.","title":"semantic_hints"},{"location":"api/docspec/#class-module","text":"@dataclasses . dataclass class Module ( HasMembers ) [view_source] Represents a module, basically a named container for code/API objects. Modules may be nested in other modules. Be aware that for historical reasons, some loaders lile docspec_python by default do not return nested modules, even if nesting would be appropriate (and instead the Module.name simply contains the fully qualified name).","title":"Class Module"},{"location":"api/docspec/#members_2","text":"A list of module members.","title":"members"},{"location":"api/docspec/#load_module","text":"def load_module ( source : t . Union [ str , t . TextIO , t . Dict [ str , t . Any ]], filename : t . Optional [ str ] = None , loader : t . Callable [[ t . IO [ str ]], t . Any ] = json . load ) -> Module [view_source] Loads a Module from the specified source , which may be either a filename, a file-like object to read from or plain structured data. Arguments source : The JSON source to load the module from. filename : The name of the source. This will be displayed in error messages if the deserialization fails. loader : A function for loading plain structured data from a file-like object. Defaults to json.load() . Returns The loaded Module object.","title":"load_module"},{"location":"api/docspec/#load_modules","text":"def load_modules ( source : t . Union [ str , t . TextIO , t . Iterable [ t . Any ]], filename : t . Optional [ str ] = None , loader : t . Callable [[ t . IO [ str ]], t . Any ] = json . load ) -> t . Iterable [ Module ] [view_source] Loads a stream of modules from the specified source . Similar to load_module() , the source can be a filename, file-like object or a list of plain structured data to deserialize from.","title":"load_modules"},{"location":"api/docspec/#dump_module","text":"def dump_module ( module : Module , target : t . Optional [ t . Union [ str , t . IO [ str ]]] = None , dumper : t . Callable [[ t . Any , t . IO [ str ]], None ] = json . dump ) -> t . Optional [ t . Dict [ str , t . Any ]] [view_source] Dumps a module to the specified target or returns it as plain structured data.","title":"dump_module"},{"location":"api/docspec/#filter_visit","text":"def filter_visit ( objects : t . MutableSequence [ ApiObject ], predicate : t . Callable [[ ApiObject ], bool ], order : str = 'pre' ) -> t . MutableSequence [ ApiObject ] [view_source] Visits all objects recursively, applying the predicate in the specified order . If the predicate returrns False , the object will be removed from it's containing list. If an object is removed in pre-order, it's members will not be visited. Arguments : objects : A list of objects to visit recursively. This list will be modified if the predicate returns False for an object. predicate : The function to apply over all visited objects. order : The order in which the objects are visited. The default order is 'pre' in which case the predicate is called before visiting the object's members. The order may also be 'post' .","title":"filter_visit"},{"location":"api/docspec/#visit","text":"def visit ( objects : t . Sequence [ ApiObject ], func : t . Callable [[ ApiObject ], t . Any ], order : str = 'pre' ) -> None [view_source] Visits all objects , applying func in the specified order .","title":"visit"},{"location":"api/docspec/#get_member","text":"def get_member ( obj : ApiObject , name : str ) -> t . Optional [ ApiObject ] [view_source] Generic function to retrieve a member from an API object. This will always return None for objects that don't support members (eg. Function and Variable ).","title":"get_member"},{"location":"changelog/docspec-python/","text":"Docspec-Python Changelog 2.0.1 (2022-03-24) Type Description PR Issues Author Fix Fix `format_arglist()` for function signatures that contained a `POSITIONAL_REMAINDER` argument followed by a `KEYWORD_ONLY` (i.e. any other arguments besides `KEYWORD_REMAINDER`) to not yield an additional star (`*`) NiklasRosenstein/pydoc-markdown#255 @NiklasRosenstein 2.0.0a1 (2022-02-24) Type Description PR Issues Author Feature support PEP 420 namespace packages 62 54 @NiklasRosenstein Improvement support Path where a file system path is expected (e.g. `iter_package_files()`, `load_python_modules()`) 62 61 @NiklasRosenstein Breaking change `Docstring` class no longer inherits from `str` and is no longer frozen 64 49 @NiklasRosenstein Breaking change rename `Data` to `Variable` 68 67 @NiklasRosenstein Hygiene move `VariableSemantic`, `FunctionSemantic` and `ClassSemantic` into global scope 69 @NiklasRosenstein 1.3.0 (2022-02-23) Type Description PR Issues Author Fix strip whitespace around `Class.bases` 55 53 @NiklasRosenstein Tests add `test_funcdef_7_posonly_args` unit test to test various more combinations of function arguments, including `POSITIONAL_ONLY`) 58 57 @NiklasRosenstein, @tristanlatr Refactor use `nr.util.scanner.Scanner` instead of homebrew `ListScanner` class 58 @NiklasRosenstein Fix fix parsing of positional only arguments 58 57 @NiklasRosenstein 1.2.0 (2021-09-24) Type Description PR Issues Author Feature add `format_arglist(render_type_hints)` argument @NiklasRosenstein 1.1.1 (2021-08-27) Type Description PR Issues Author Fix support imports on the class-level 34 @NiklasRosenstein 1.1.0 (2021-08-27) Type Description PR Issues Author Feature add support for the `Docstring` class now used in `ApiObject.docstring` since `docspec 1.1.0` @NiklasRosenstein Feature add support for `Indirection`s (from parsed Python imports) @NiklasRosenstein 1.0.0 (2021-07-21) Type Description PR Issues Author Breaking change Migrate to using `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databind.json`. @NiklasRosenstein Fix fix parsing of lib2to3 syntax tree if class does not have a suite (e.g., \"pass\" on the same line as the class definition) @NiklasRosenstein 0.2.0 (2021-05-29) Type Description PR Issues Author Improvement republish 0.1.1 as 0.2.0 @NiklasRosenstein 0.1.1 (2021-05-21) Type Description PR Issues Author Improvement update type hints, use `@dataclass` over `nr.sumtype` which has MyPy support @NiklasRosenstein Fix fix `discover()` to ignore Python files with more than one dot in it @NiklasRosenstein 0.1.0 (2021-02-20) Type Description PR Issues Author Fix Fix `NameError` in function type annotation @NiklasRosenstein Feature add `encoding` parameter to `load_python_modules()` and `parse_python_module()` @NiklasRosenstein 0.0.7 (2020-07-16) Type Description PR Issues Author Tests fix test cases @NiklasRosenstein Improvement no longer use `pkgutil.find_loader()` to find Python modules as it prefers modules that are already in `sys.modules` even if that instance of the module would not occurr in the specified `search_path`. `docspec_python.find_module()` now re-implements the search mechanism @NiklasRosenstein Tests add tests for Python module loader logic @NiklasRosenstein Fix fix support for Python 3.5 @NiklasRosenstein 0.0.6 (2020-07-16) Type Description PR Issues Author Fix fix `iter_package_files()` which would not respect the `search_path` argument @NiklasRosenstein 0.0.5 (2020-07-06) Type Description PR Issues Author Improvement Update calls to `ApiObject` subclasses to pass keyword arguments only (as is required in `docspec >=0.2.0`) @NiklasRosenstein Fix Fix derivation of Python module name from name of file on disk (before it would accidentally strip trailing p's or y's from the name). @NiklasRosenstein","title":"docspec-python"},{"location":"changelog/docspec-python/#docspec-python-changelog","text":"","title":"Docspec-Python Changelog"},{"location":"changelog/docspec-python/#201-2022-03-24","text":"Type Description PR Issues Author Fix Fix `format_arglist()` for function signatures that contained a `POSITIONAL_REMAINDER` argument followed by a `KEYWORD_ONLY` (i.e. any other arguments besides `KEYWORD_REMAINDER`) to not yield an additional star (`*`) NiklasRosenstein/pydoc-markdown#255 @NiklasRosenstein","title":"2.0.1 (2022-03-24)"},{"location":"changelog/docspec-python/#200a1-2022-02-24","text":"Type Description PR Issues Author Feature support PEP 420 namespace packages 62 54 @NiklasRosenstein Improvement support Path where a file system path is expected (e.g. `iter_package_files()`, `load_python_modules()`) 62 61 @NiklasRosenstein Breaking change `Docstring` class no longer inherits from `str` and is no longer frozen 64 49 @NiklasRosenstein Breaking change rename `Data` to `Variable` 68 67 @NiklasRosenstein Hygiene move `VariableSemantic`, `FunctionSemantic` and `ClassSemantic` into global scope 69 @NiklasRosenstein","title":"2.0.0a1 (2022-02-24)"},{"location":"changelog/docspec-python/#130-2022-02-23","text":"Type Description PR Issues Author Fix strip whitespace around `Class.bases` 55 53 @NiklasRosenstein Tests add `test_funcdef_7_posonly_args` unit test to test various more combinations of function arguments, including `POSITIONAL_ONLY`) 58 57 @NiklasRosenstein, @tristanlatr Refactor use `nr.util.scanner.Scanner` instead of homebrew `ListScanner` class 58 @NiklasRosenstein Fix fix parsing of positional only arguments 58 57 @NiklasRosenstein","title":"1.3.0 (2022-02-23)"},{"location":"changelog/docspec-python/#120-2021-09-24","text":"Type Description PR Issues Author Feature add `format_arglist(render_type_hints)` argument @NiklasRosenstein","title":"1.2.0 (2021-09-24)"},{"location":"changelog/docspec-python/#111-2021-08-27","text":"Type Description PR Issues Author Fix support imports on the class-level 34 @NiklasRosenstein","title":"1.1.1 (2021-08-27)"},{"location":"changelog/docspec-python/#110-2021-08-27","text":"Type Description PR Issues Author Feature add support for the `Docstring` class now used in `ApiObject.docstring` since `docspec 1.1.0` @NiklasRosenstein Feature add support for `Indirection`s (from parsed Python imports) @NiklasRosenstein","title":"1.1.0 (2021-08-27)"},{"location":"changelog/docspec-python/#100-2021-07-21","text":"Type Description PR Issues Author Breaking change Migrate to using `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databind.json`. @NiklasRosenstein Fix fix parsing of lib2to3 syntax tree if class does not have a suite (e.g., \"pass\" on the same line as the class definition) @NiklasRosenstein","title":"1.0.0 (2021-07-21)"},{"location":"changelog/docspec-python/#020-2021-05-29","text":"Type Description PR Issues Author Improvement republish 0.1.1 as 0.2.0 @NiklasRosenstein","title":"0.2.0 (2021-05-29)"},{"location":"changelog/docspec-python/#011-2021-05-21","text":"Type Description PR Issues Author Improvement update type hints, use `@dataclass` over `nr.sumtype` which has MyPy support @NiklasRosenstein Fix fix `discover()` to ignore Python files with more than one dot in it @NiklasRosenstein","title":"0.1.1 (2021-05-21)"},{"location":"changelog/docspec-python/#010-2021-02-20","text":"Type Description PR Issues Author Fix Fix `NameError` in function type annotation @NiklasRosenstein Feature add `encoding` parameter to `load_python_modules()` and `parse_python_module()` @NiklasRosenstein","title":"0.1.0 (2021-02-20)"},{"location":"changelog/docspec-python/#007-2020-07-16","text":"Type Description PR Issues Author Tests fix test cases @NiklasRosenstein Improvement no longer use `pkgutil.find_loader()` to find Python modules as it prefers modules that are already in `sys.modules` even if that instance of the module would not occurr in the specified `search_path`. `docspec_python.find_module()` now re-implements the search mechanism @NiklasRosenstein Tests add tests for Python module loader logic @NiklasRosenstein Fix fix support for Python 3.5 @NiklasRosenstein","title":"0.0.7 (2020-07-16)"},{"location":"changelog/docspec-python/#006-2020-07-16","text":"Type Description PR Issues Author Fix fix `iter_package_files()` which would not respect the `search_path` argument @NiklasRosenstein","title":"0.0.6 (2020-07-16)"},{"location":"changelog/docspec-python/#005-2020-07-06","text":"Type Description PR Issues Author Improvement Update calls to `ApiObject` subclasses to pass keyword arguments only (as is required in `docspec >=0.2.0`) @NiklasRosenstein Fix Fix derivation of Python module name from name of file on disk (before it would accidentally strip trailing p's or y's from the name). @NiklasRosenstein","title":"0.0.5 (2020-07-06)"},{"location":"changelog/docspec/","text":"Docspec Changelog 2.0.0a1 (2022-02-24) Type Description PR Issues Author Fix update `specification.yml` to show correct types of `Argument.location`, `Decoration.location` and `Module.location` 56 52 @NiklasRosenstein Breaking change remove deprecated class `ReverseMap` 63 @NiklasRosenstein Breaking change `Docstring` class no longer inherits from `str` and is no longer frozen 64 49 @NiklasRosenstein Breaking change rename `Data` to `Variable` 68 67 @NiklasRosenstein Hygiene move `VariableSemantic`, `FunctionSemantic` and `ClassSemantic` into global scope @NiklasRosenstein Improvement `filter_visit()` and `visit()` now expect a `MutableSequence` instead of `List` @NiklasRosenstein Hygiene remove `files` argument from `load_python_modules()` @NiklasRosenstein Improvement declare two overloads for `parse_python_module()` for reading from a filename or a file-like object @NiklasRosenstein Breaking change `Location.filename` is no longer optional as per the specification @NiklasRosenstein Breaking change harden requirements of spec by requiring a `location` even on `Decoration` and `Argument` objects, and the location is no longer optional. Rearrange the argument the Python classes such that the `location` argument comes first, always 70 @NiklasRosenstein Breaking change remove `file` argument from `docspec-python` CLI 70 @NiklasRosenstein 1.2.0 (2021-09-24) Type Description PR Issues Author Feature add `Data.modifiers`, `Data.semantic_hints`, `Class.modifiers`, `Class.semantic_hints` and `Function.semantic_hints` 30 @NiklasRosenstein Improvement rename `Argument.Type` enumeration values to `UPPER_CASE` format according to latest specification (full backwards compatibility, including deserializing JSON payloads with the old argument type names) @NiklasRosenstein Feature add `Argument.location` and `Decoration.location` properties 28 @NiklasRosenstein Feature add `Location.endlineno` property to spec 32 @NiklasRosenstein Improvement add `Decoration.arglist`, document that `Decoration.args` is deprecated @NiklasRosenstein 1.1.0 (2021-08-27) Type Description PR Issues Author Feature add `ApiObject.parent` and `ApiObject.path` to deprecate `ReverseMap` class @NiklasRosenstein Feature add `ApiObject.sync_hierarchy()` method @NiklasRosenstein Feature introduce `HasMembers` base class for `Class` and `Module`, `Module.members` can now container other modules 15 @NiklasRosenstein Improvement `get_member()` and `filter_visit()` have been updated to make use of the `HasMembers` base class instead of relying on `hasattr()`/`getattr()` @NiklasRosenstein Feature add `Indirection` class to keep track of imports and resolve names correctly. @tristanlatr Feature add `Docstring` class which represents the docstring, plus the location of the docstring @NiklasRosenstein 1.0.2 (2021-07-29) Type Description PR Issues Author Fix Add some type annotations 14 @tristanlatr 1.0.1 (2021-07-22) Type Description PR Issues Author Fix `docspec.get_members()` access object members wrong @NiklasRosenstein 1.0.0 (2021-07-21) Type Description PR Issues Author Breaking change Migrate to using `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databind.json`. @NiklasRosenstein 0.2.1 (2021-02-21) Type Description PR Issues Author Fix fix dependencies @NiklasRosenstein 0.2.0 (2020-07-06) Type Description PR Issues Author Improvement `ApiObject` constructors now accept keyword arguments only @NiklasRosenstein Improvement All `nullable` fields now have `default=None` @NiklasRosenstein Improvement Many serializable classes are now decorated with `SkipDefaults()` @NiklasRosenstein","title":"docspec"},{"location":"changelog/docspec/#docspec-changelog","text":"","title":"Docspec Changelog"},{"location":"changelog/docspec/#200a1-2022-02-24","text":"Type Description PR Issues Author Fix update `specification.yml` to show correct types of `Argument.location`, `Decoration.location` and `Module.location` 56 52 @NiklasRosenstein Breaking change remove deprecated class `ReverseMap` 63 @NiklasRosenstein Breaking change `Docstring` class no longer inherits from `str` and is no longer frozen 64 49 @NiklasRosenstein Breaking change rename `Data` to `Variable` 68 67 @NiklasRosenstein Hygiene move `VariableSemantic`, `FunctionSemantic` and `ClassSemantic` into global scope @NiklasRosenstein Improvement `filter_visit()` and `visit()` now expect a `MutableSequence` instead of `List` @NiklasRosenstein Hygiene remove `files` argument from `load_python_modules()` @NiklasRosenstein Improvement declare two overloads for `parse_python_module()` for reading from a filename or a file-like object @NiklasRosenstein Breaking change `Location.filename` is no longer optional as per the specification @NiklasRosenstein Breaking change harden requirements of spec by requiring a `location` even on `Decoration` and `Argument` objects, and the location is no longer optional. Rearrange the argument the Python classes such that the `location` argument comes first, always 70 @NiklasRosenstein Breaking change remove `file` argument from `docspec-python` CLI 70 @NiklasRosenstein","title":"2.0.0a1 (2022-02-24)"},{"location":"changelog/docspec/#120-2021-09-24","text":"Type Description PR Issues Author Feature add `Data.modifiers`, `Data.semantic_hints`, `Class.modifiers`, `Class.semantic_hints` and `Function.semantic_hints` 30 @NiklasRosenstein Improvement rename `Argument.Type` enumeration values to `UPPER_CASE` format according to latest specification (full backwards compatibility, including deserializing JSON payloads with the old argument type names) @NiklasRosenstein Feature add `Argument.location` and `Decoration.location` properties 28 @NiklasRosenstein Feature add `Location.endlineno` property to spec 32 @NiklasRosenstein Improvement add `Decoration.arglist`, document that `Decoration.args` is deprecated @NiklasRosenstein","title":"1.2.0 (2021-09-24)"},{"location":"changelog/docspec/#110-2021-08-27","text":"Type Description PR Issues Author Feature add `ApiObject.parent` and `ApiObject.path` to deprecate `ReverseMap` class @NiklasRosenstein Feature add `ApiObject.sync_hierarchy()` method @NiklasRosenstein Feature introduce `HasMembers` base class for `Class` and `Module`, `Module.members` can now container other modules 15 @NiklasRosenstein Improvement `get_member()` and `filter_visit()` have been updated to make use of the `HasMembers` base class instead of relying on `hasattr()`/`getattr()` @NiklasRosenstein Feature add `Indirection` class to keep track of imports and resolve names correctly. @tristanlatr Feature add `Docstring` class which represents the docstring, plus the location of the docstring @NiklasRosenstein","title":"1.1.0 (2021-08-27)"},{"location":"changelog/docspec/#102-2021-07-29","text":"Type Description PR Issues Author Fix Add some type annotations 14 @tristanlatr","title":"1.0.2 (2021-07-29)"},{"location":"changelog/docspec/#101-2021-07-22","text":"Type Description PR Issues Author Fix `docspec.get_members()` access object members wrong @NiklasRosenstein","title":"1.0.1 (2021-07-22)"},{"location":"changelog/docspec/#100-2021-07-21","text":"Type Description PR Issues Author Breaking change Migrate to using `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databind.json`. @NiklasRosenstein","title":"1.0.0 (2021-07-21)"},{"location":"changelog/docspec/#021-2021-02-21","text":"Type Description PR Issues Author Fix fix dependencies @NiklasRosenstein","title":"0.2.1 (2021-02-21)"},{"location":"changelog/docspec/#020-2020-07-06","text":"Type Description PR Issues Author Improvement `ApiObject` constructors now accept keyword arguments only @NiklasRosenstein Improvement All `nullable` fields now have `default=None` @NiklasRosenstein Improvement Many serializable classes are now decorated with `SkipDefaults()` @NiklasRosenstein","title":"0.2.0 (2020-07-06)"}]}