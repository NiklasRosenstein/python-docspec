{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docspec Docspec is a JSON object specification for representing API documentation of programming languages. While in it's current form it is targeting Python APIs, it was designed so that it can be extended to cover a more generalized set of languages in the future. Contents docspec : Python library to (de-) serialize Docspec JSON data and CLI. docspec-python : Python library to parse Python source code into Docspec compatible JSON data using lib2to3 . Copyright \u00a9 2020, Niklas Rosenstein","title":"Home"},{"location":"#docspec","text":"Docspec is a JSON object specification for representing API documentation of programming languages. While in it's current form it is targeting Python APIs, it was designed so that it can be extended to cover a more generalized set of languages in the future. Contents docspec : Python library to (de-) serialize Docspec JSON data and CLI. docspec-python : Python library to parse Python source code into Docspec compatible JSON data using lib2to3 . Copyright \u00a9 2020, Niklas Rosenstein","title":"Docspec"},{"location":"changelog/","text":"docspec Changelog Unreleased (no release date) general feature : add ApiObject.parent and ApiObject.path to deprecate ReverseMap class feature : add ApiObject.sync_hierarchy() method feature : introduce HasMembers base class for Class and Module , Module.members can now container other modules (#15) change : get_member() and filter_visit() have been updated to make use of the HasMembers base class instead of relying on hasattr() / getattr() feature : add Indirection class to keep track of imports and resolve names correctly. (@tristanlatr) 1.0.0 (2021-07-21) general breaking_change : Migrate to using databind.core 1.x and databind.json 1.x from nr.databind.core and nr.databind.json . 0.2.1 (2021-02-21) general fix : fix dependencies 0.2.0 (2020-07-06) general change : ApiObject constructors now accept keyword arguments only change : All nullable fields now have default=None change : Many serializable classes are now decorated with SkipDefaults() docspec_python Changelog 1.0.0 (2021-07-21) general breaking_change : Migrate to using databind.core 1.x and databind.json 1.x from nr.databind.core and nr.databind.json . 0.2.0 (2021-05-29) general change : republish 0.1.1 as 0.2.0 0.1.1 (2021-05-21) general change : update type hints, use @dataclass over nr.sumtype which has MyPy support fix : fix discover() to ignore Python files with more than one dot in it 0.1.0 (2021-02-20) general fix : Fix NameError in function type annotation feature : add encoding parameter to load_python_modules() and parse_python_module() 0.0.7 (2020-07-16) general improvement : no longer use pkgutil.find_loader() to find Python modules as it prefers modules that are already in sys.modules even if that instance of the module would not occurr in the specified search_path . docspec_python.find_module() now re-implements the search mechanism tests : add tests for Python module loader logic fix : fix support for Python 3.5 tests fix : fix test cases 0.0.6 (2020-07-16) general fix : fix iter_package_files() which would not respect the search_path argument 0.0.5 (2020-07-06) general change : Update calls to ApiObject subclasses to pass keyword arguments only (as is required in docspec >=0.2.0 ) fix : Fix derivation of Python module name from name of file on disk (before it would accidentally strip trailing p's or y's from the name).","title":"Changelog"},{"location":"changelog/#docspec-changelog","text":"","title":"docspec Changelog"},{"location":"changelog/#unreleased-no-release-date","text":"general feature : add ApiObject.parent and ApiObject.path to deprecate ReverseMap class feature : add ApiObject.sync_hierarchy() method feature : introduce HasMembers base class for Class and Module , Module.members can now container other modules (#15) change : get_member() and filter_visit() have been updated to make use of the HasMembers base class instead of relying on hasattr() / getattr() feature : add Indirection class to keep track of imports and resolve names correctly. (@tristanlatr)","title":"Unreleased (no release date)"},{"location":"changelog/#100-2021-07-21","text":"general breaking_change : Migrate to using databind.core 1.x and databind.json 1.x from nr.databind.core and nr.databind.json .","title":"1.0.0 (2021-07-21)"},{"location":"changelog/#021-2021-02-21","text":"general fix : fix dependencies","title":"0.2.1 (2021-02-21)"},{"location":"changelog/#020-2020-07-06","text":"general change : ApiObject constructors now accept keyword arguments only change : All nullable fields now have default=None change : Many serializable classes are now decorated with SkipDefaults()","title":"0.2.0 (2020-07-06)"},{"location":"changelog/#docspec_python-changelog","text":"","title":"docspec_python Changelog"},{"location":"changelog/#100-2021-07-21_1","text":"general breaking_change : Migrate to using databind.core 1.x and databind.json 1.x from nr.databind.core and nr.databind.json .","title":"1.0.0 (2021-07-21)"},{"location":"changelog/#020-2021-05-29","text":"general change : republish 0.1.1 as 0.2.0","title":"0.2.0 (2021-05-29)"},{"location":"changelog/#011-2021-05-21","text":"general change : update type hints, use @dataclass over nr.sumtype which has MyPy support fix : fix discover() to ignore Python files with more than one dot in it","title":"0.1.1 (2021-05-21)"},{"location":"changelog/#010-2021-02-20","text":"general fix : Fix NameError in function type annotation feature : add encoding parameter to load_python_modules() and parse_python_module()","title":"0.1.0 (2021-02-20)"},{"location":"changelog/#007-2020-07-16","text":"general improvement : no longer use pkgutil.find_loader() to find Python modules as it prefers modules that are already in sys.modules even if that instance of the module would not occurr in the specified search_path . docspec_python.find_module() now re-implements the search mechanism tests : add tests for Python module loader logic fix : fix support for Python 3.5 tests fix : fix test cases","title":"0.0.7 (2020-07-16)"},{"location":"changelog/#006-2020-07-16","text":"general fix : fix iter_package_files() which would not respect the search_path argument","title":"0.0.6 (2020-07-16)"},{"location":"changelog/#005-2020-07-06","text":"general change : Update calls to ApiObject subclasses to pass keyword arguments only (as is required in docspec >=0.2.0 ) fix : Fix derivation of Python module name from name of file on disk (before it would accidentally strip trailing p's or y's from the name).","title":"0.0.5 (2020-07-06)"},{"location":"specification/","text":"Docspec JSON object specification Table of Contents Location Module Class Data Function Argument Decoration Object Types Location The location object describes where the an API object was extracted from a file. Uusally this points to the source file and a line number. The filename should always be relative to the root of a project or source control repository. Fields filename (str) \u2013 A relative filename. lineno (int): \u2013 The line number from which the API object was parsed. Module A module represents a collection of data, function and classes. In the Python language, it represents an actual Python module. In other languages it may refer to another file type or a namespace. Fields name (str) \u2013 The full name of the module. location (Location) docstring (Optional[str]) \u2013 The docstring for the module as parsed from the source. members (array) \u2013 An array of Data , Function or Class objects. Class Represents a class definition. Fields type (str) \u2013 Value is class name (str) location (Location) docstring (Optional[str]) metaclass (Optional[str]) \u2013 A string representing the metaclass. bases (Optional[array]) \u2013 An array of str representing the base classes. members (array) \u2013 An array of Data , Function or Class objects. decorations (Optional[array]) \u2013 An array of Decoration objects. Data A Data object represents an expression assigned to a name (e.g., a variable or constant). Fields type (str) \u2013 Value is data . name (str) \u2013 The name for the value. location (Location) docstring (Optional[str]) datatype (Optional[str]) \u2013 The datatype of the value. value (Optional[str]) \u2013 The value in the form of the definition in the source. Function Represents a function definition in a module or class. Fields type (str) \u2013 Value is function name (str) location (str) docstring (Optional[str]) modifiers (Optional[array]) \u2013 An array of str representing the modifers of this function (e.g. async , classmethod , etc.). args (array) \u2013 An array of Argument objects. return_type (Optional[str]) \u2013 The return type of the function. decorations (Optional[array]) \u2013 An array of Decoration objects. Argument Represents a function argument. Fields type (str) \u2013 One of PositionalOnly , Positional , PositionalRemainder , KeywordOnly or KeywordRemainder . name (str) datatype (Optional[str]) default_value (Optional[str]) Decoration Represents a decoration that can be applied to a function or class. Fields name (str) \u2013 The name of the decoration. args (Optionla[array]) \u2013 An array of str representing the arguments passed to the decoration. If unset or null, indicates that the decoration was not called like a function. Indirection Represents an imported name. It can be used to properly find the full name target of a link written with a local name. Fields type (str) \u2013 Value is indirection . name (str) \u2013 The local name of the indirection. target (str) \u2013 The target name of the indirection location (Location) docstring (Optional[str]) Copyright \u00a9 2020, Niklas Rosenstein","title":"Specification"},{"location":"specification/#docspec-json-object-specification","text":"Table of Contents Location Module Class Data Function Argument Decoration","title":"Docspec JSON object specification"},{"location":"specification/#object-types","text":"","title":"Object Types"},{"location":"specification/#location","text":"The location object describes where the an API object was extracted from a file. Uusally this points to the source file and a line number. The filename should always be relative to the root of a project or source control repository. Fields filename (str) \u2013 A relative filename. lineno (int): \u2013 The line number from which the API object was parsed.","title":"Location"},{"location":"specification/#module","text":"A module represents a collection of data, function and classes. In the Python language, it represents an actual Python module. In other languages it may refer to another file type or a namespace. Fields name (str) \u2013 The full name of the module. location (Location) docstring (Optional[str]) \u2013 The docstring for the module as parsed from the source. members (array) \u2013 An array of Data , Function or Class objects.","title":"Module"},{"location":"specification/#class","text":"Represents a class definition. Fields type (str) \u2013 Value is class name (str) location (Location) docstring (Optional[str]) metaclass (Optional[str]) \u2013 A string representing the metaclass. bases (Optional[array]) \u2013 An array of str representing the base classes. members (array) \u2013 An array of Data , Function or Class objects. decorations (Optional[array]) \u2013 An array of Decoration objects.","title":"Class"},{"location":"specification/#data","text":"A Data object represents an expression assigned to a name (e.g., a variable or constant). Fields type (str) \u2013 Value is data . name (str) \u2013 The name for the value. location (Location) docstring (Optional[str]) datatype (Optional[str]) \u2013 The datatype of the value. value (Optional[str]) \u2013 The value in the form of the definition in the source.","title":"Data"},{"location":"specification/#function","text":"Represents a function definition in a module or class. Fields type (str) \u2013 Value is function name (str) location (str) docstring (Optional[str]) modifiers (Optional[array]) \u2013 An array of str representing the modifers of this function (e.g. async , classmethod , etc.). args (array) \u2013 An array of Argument objects. return_type (Optional[str]) \u2013 The return type of the function. decorations (Optional[array]) \u2013 An array of Decoration objects.","title":"Function"},{"location":"specification/#argument","text":"Represents a function argument. Fields type (str) \u2013 One of PositionalOnly , Positional , PositionalRemainder , KeywordOnly or KeywordRemainder . name (str) datatype (Optional[str]) default_value (Optional[str])","title":"Argument"},{"location":"specification/#decoration","text":"Represents a decoration that can be applied to a function or class. Fields name (str) \u2013 The name of the decoration. args (Optionla[array]) \u2013 An array of str representing the arguments passed to the decoration. If unset or null, indicates that the decoration was not called like a function.","title":"Decoration"},{"location":"specification/#indirection","text":"Represents an imported name. It can be used to properly find the full name target of a link written with a local name. Fields type (str) \u2013 Value is indirection . name (str) \u2013 The local name of the indirection. target (str) \u2013 The target name of the indirection location (Location) docstring (Optional[str]) Copyright \u00a9 2020, Niklas Rosenstein","title":"Indirection"},{"location":"api-documentation/docspec/","text":"docspec Location Objects @dataclasses.dataclass class Location() Represents the location of an ApiObject by a filename and line number. Decoration Objects @dataclasses.dataclass class Decoration() Represents a decorator on a Class or Function . name The name of the decorator (i.e. the text between the @ and ( ). args Decorator arguments as plain code (including the leading and trailing parentheses). This is None when the decorator does not have call arguments. Argument Objects @dataclasses.dataclass class Argument() Represents a Function argument. Type Objects class Type(enum.Enum) The type of the argument. This is currently very Python-centric, however most other languages should be able to represent the various argument types with a subset of these types without additions (e.g. Java or TypeScript only support Positional and PositionalRemainder arguments). PositionalOnly A positional only argument. Such arguments are denoted in Python like this: def foo(a, b, /): ... Positional A positional argument, which may also be given as a keyword argument. Basically that is just a normal argument as you would see most commonly in Python function definitions. PositionalRemainder An argument that denotes the capture of additional positional arguments, aka. \"args\" or \"varags\". KeywordOnly A keyword-only argument is denoted in Python like thisL def foo(*, kwonly): ... KeywordRemainder An argument that captures additional keyword arguments, aka. \"kwargs\". name The name of the argument. type The argument type. decorations A list of argument decorations. Python does not actually support decorators on function arguments like for example Java does. This is probably premature to add into the API, but hey, here it is. datatype The datatype/type annotation of this argument as a code string. default_value The default value of the argument as a code string. ApiObject Objects @dataclasses.dataclass class ApiObject() The base class for representing \"API Objects\". Any API object is any addressable entity in code, be that a variable/constant, function, class or module. name The name of the entity. This is usually relative to the respective parent of the entity, as opposed to it's fully qualified name/absolute name. However, that is more of a recommendation than rule. For example the docspec_python loader by default returns Module objects with their full module name (and does not create a module hierarchy). location The location of the API object, i.e. where it is sourced from/defined in the code. docstring The documentation string of the API object. parent | @property | parent() -> t.Optional['HasMembers'] Returns the parent of the HasMembers . Note that if you make any modifications to the API object tree, you will need to call sync_hierarchy() afterwards because adding to Class.members or Module.members does not automatically keep the parent property in sync. path | @property | path() -> t.List['ApiObject'] Returns a list of all of this API object's parents, from top to bottom. The list includes self as the last item. sync_hierarchy | sync_hierarchy(parent: t.Optional['HasMembers'] = None) -> None Synchronize the hierarchy of this API object and all of it's children. This should be called when the HasMembers.members are updated to ensure that all child objects reference the right parent . Loaders are expected to return ApiObjects in a fully synchronized state such that the user does not have to call this method unless they are doing modifications to the tree. Data Objects @dataclasses.dataclass class Data(ApiObject) Represents a variable assignment (e.g. for global variables (often used as constants) or class members). datatype The datatype associated with the assignment as code. value The value of the variable as code. Indirection Objects @dataclasses.dataclass class Indirection(ApiObject) Represents an imported name. It can be used to properly find the full name target of a link written with a local name. Function Objects @dataclasses.dataclass class Function(ApiObject) Represents a function definition. This can be in a Module for plain functions or in a Class for methods. The decorations need to be introspected to understand if the function has a special purpose (e.g. is it a @property , @classmethod or @staticmethod ?). modifiers A list of modifiers used in the function definition. For example, the only valid modified in Python is \"async\". args A list of the function arguments. return_type The return type of the function as a code string. decorations A list of decorations used on the function. HasMembers Objects class HasMembers(ApiObject) Base class for API objects that can have members, e.g. Class and Module . members The members of the API object. Class Objects @dataclasses.dataclass class Class(HasMembers) Represents a class definition. metaclass The metaclass used in the class definition as a code string. bases The list of base classes as code strings. decorations A list of decorations used in the class definition. members A list of the classes members. Functions in a class are to be considered instance methods of that class unless some information about the Function indicates otherwise. Module Objects @dataclasses.dataclass class Module(HasMembers) Represents a module, basically a named container for code/API objects. Modules may be nested in other modules. Be aware that for historical reasons, some loaders lile docspec_python by default do not return nested modules, even if nesting would be appropriate (and instead the Module.name simply contains the fully qualified name). members A list of module members. load_module load_module(source: t.Union[str, t.TextIO, t.Dict[str, t.Any]], filename: t.Optional[str] = None, loader: t.Callable[[t.IO[str]], t.Any] = json.load) -> Module Loads a Module from the specified source , which may be either a filename, a file-like object to read from or plain structured data. Arguments : messages if the deserialization fails. object. Defaults to json.load() . - source : The JSON source to load the module from. - filename : The name of the source. This will be displayed in error - loader : A function for loading plain structured data from a file-like load_modules load_modules(source: t.Union[str, t.TextIO, t.Iterable[t.Any]], filename: t.Optional[str] = None, loader: t.Callable[[t.IO[str]], t.Any] = json.load) -> t.Iterable[Module] Loads a stream of modules from the specified source . Similar to load_module() , the source can be a filename, file-like object or a list of plain structured data to deserialize from. dump_module dump_module(module: Module, target: t.Optional[t.Union[str, t.IO[str]]] = None, dumper: t.Callable[[t.Any, t.IO[str]], None] = json.dump) -> t.Optional[t.Dict[str, t.Any]] Dumps a module to the specified target or returns it as plain structured data. filter_visit filter_visit(objects: t.List[ApiObject], predicate: t.Callable[[ApiObject], bool], order: str = 'pre') -> t.List[ApiObject] Visits all objects recursively, applying the predicate in the specified order . If the predicate returrns False , the object will be removed from it's containing list. If an object is removed in pre-order, it's members will not be visited. Arguments : the predicate returns False for an object. in which case the predicate is called before visiting the object's members. The order may also be 'post' . - objects : A list of objects to visit recursively. This list will be modified if - predicate : The function to apply over all visited objects. - order : The order in which the objects are visited. The default order is 'pre' visit visit(objects: t.List[ApiObject], func: t.Callable[[ApiObject], t.Any], order: str = 'pre') -> None Visits all objects , applying func in the specified order . ReverseMap Objects @deprecated.deprecated( version='1.1.0', reason='#docspec.ReverseMap is deprecated and will be removed in a future version, use #ApiObject.parent ' 'and #ApiObject.path instead') class ReverseMap() Reverse map for finding the parent of an ApiObject . @deprecated 1.1.0 -- Use ApiObject.parent and ApiObject.path instead of get_parent() and path() . get_member get_member(obj: ApiObject, name: str) -> t.Optional[ApiObject] Generic function to retrieve a member from an API object. This will always return None for objects that don't support members (eg. Function and Data ). docspec.__main__","title":"docspec"},{"location":"api-documentation/docspec/#docspec","text":"","title":"docspec"},{"location":"api-documentation/docspec/#location-objects","text":"@dataclasses.dataclass class Location() Represents the location of an ApiObject by a filename and line number.","title":"Location Objects"},{"location":"api-documentation/docspec/#decoration-objects","text":"@dataclasses.dataclass class Decoration() Represents a decorator on a Class or Function .","title":"Decoration Objects"},{"location":"api-documentation/docspec/#name","text":"The name of the decorator (i.e. the text between the @ and ( ).","title":"name"},{"location":"api-documentation/docspec/#args","text":"Decorator arguments as plain code (including the leading and trailing parentheses). This is None when the decorator does not have call arguments.","title":"args"},{"location":"api-documentation/docspec/#argument-objects","text":"@dataclasses.dataclass class Argument() Represents a Function argument.","title":"Argument Objects"},{"location":"api-documentation/docspec/#type-objects","text":"class Type(enum.Enum) The type of the argument. This is currently very Python-centric, however most other languages should be able to represent the various argument types with a subset of these types without additions (e.g. Java or TypeScript only support Positional and PositionalRemainder arguments).","title":"Type Objects"},{"location":"api-documentation/docspec/#positionalonly","text":"A positional only argument. Such arguments are denoted in Python like this: def foo(a, b, /): ...","title":"PositionalOnly"},{"location":"api-documentation/docspec/#positional","text":"A positional argument, which may also be given as a keyword argument. Basically that is just a normal argument as you would see most commonly in Python function definitions.","title":"Positional"},{"location":"api-documentation/docspec/#positionalremainder","text":"An argument that denotes the capture of additional positional arguments, aka. \"args\" or \"varags\".","title":"PositionalRemainder"},{"location":"api-documentation/docspec/#keywordonly","text":"A keyword-only argument is denoted in Python like thisL def foo(*, kwonly): ...","title":"KeywordOnly"},{"location":"api-documentation/docspec/#keywordremainder","text":"An argument that captures additional keyword arguments, aka. \"kwargs\".","title":"KeywordRemainder"},{"location":"api-documentation/docspec/#name_1","text":"The name of the argument.","title":"name"},{"location":"api-documentation/docspec/#type","text":"The argument type.","title":"type"},{"location":"api-documentation/docspec/#decorations","text":"A list of argument decorations. Python does not actually support decorators on function arguments like for example Java does. This is probably premature to add into the API, but hey, here it is.","title":"decorations"},{"location":"api-documentation/docspec/#datatype","text":"The datatype/type annotation of this argument as a code string.","title":"datatype"},{"location":"api-documentation/docspec/#default_value","text":"The default value of the argument as a code string.","title":"default_value"},{"location":"api-documentation/docspec/#apiobject-objects","text":"@dataclasses.dataclass class ApiObject() The base class for representing \"API Objects\". Any API object is any addressable entity in code, be that a variable/constant, function, class or module.","title":"ApiObject Objects"},{"location":"api-documentation/docspec/#name_2","text":"The name of the entity. This is usually relative to the respective parent of the entity, as opposed to it's fully qualified name/absolute name. However, that is more of a recommendation than rule. For example the docspec_python loader by default returns Module objects with their full module name (and does not create a module hierarchy).","title":"name"},{"location":"api-documentation/docspec/#location","text":"The location of the API object, i.e. where it is sourced from/defined in the code.","title":"location"},{"location":"api-documentation/docspec/#docstring","text":"The documentation string of the API object.","title":"docstring"},{"location":"api-documentation/docspec/#parent","text":"| @property | parent() -> t.Optional['HasMembers'] Returns the parent of the HasMembers . Note that if you make any modifications to the API object tree, you will need to call sync_hierarchy() afterwards because adding to Class.members or Module.members does not automatically keep the parent property in sync.","title":"parent"},{"location":"api-documentation/docspec/#path","text":"| @property | path() -> t.List['ApiObject'] Returns a list of all of this API object's parents, from top to bottom. The list includes self as the last item.","title":"path"},{"location":"api-documentation/docspec/#sync_hierarchy","text":"| sync_hierarchy(parent: t.Optional['HasMembers'] = None) -> None Synchronize the hierarchy of this API object and all of it's children. This should be called when the HasMembers.members are updated to ensure that all child objects reference the right parent . Loaders are expected to return ApiObjects in a fully synchronized state such that the user does not have to call this method unless they are doing modifications to the tree.","title":"sync_hierarchy"},{"location":"api-documentation/docspec/#data-objects","text":"@dataclasses.dataclass class Data(ApiObject) Represents a variable assignment (e.g. for global variables (often used as constants) or class members).","title":"Data Objects"},{"location":"api-documentation/docspec/#datatype_1","text":"The datatype associated with the assignment as code.","title":"datatype"},{"location":"api-documentation/docspec/#value","text":"The value of the variable as code.","title":"value"},{"location":"api-documentation/docspec/#indirection-objects","text":"@dataclasses.dataclass class Indirection(ApiObject) Represents an imported name. It can be used to properly find the full name target of a link written with a local name.","title":"Indirection Objects"},{"location":"api-documentation/docspec/#function-objects","text":"@dataclasses.dataclass class Function(ApiObject) Represents a function definition. This can be in a Module for plain functions or in a Class for methods. The decorations need to be introspected to understand if the function has a special purpose (e.g. is it a @property , @classmethod or @staticmethod ?).","title":"Function Objects"},{"location":"api-documentation/docspec/#modifiers","text":"A list of modifiers used in the function definition. For example, the only valid modified in Python is \"async\".","title":"modifiers"},{"location":"api-documentation/docspec/#args_1","text":"A list of the function arguments.","title":"args"},{"location":"api-documentation/docspec/#return_type","text":"The return type of the function as a code string.","title":"return_type"},{"location":"api-documentation/docspec/#decorations_1","text":"A list of decorations used on the function.","title":"decorations"},{"location":"api-documentation/docspec/#hasmembers-objects","text":"class HasMembers(ApiObject) Base class for API objects that can have members, e.g. Class and Module .","title":"HasMembers Objects"},{"location":"api-documentation/docspec/#members","text":"The members of the API object.","title":"members"},{"location":"api-documentation/docspec/#class-objects","text":"@dataclasses.dataclass class Class(HasMembers) Represents a class definition.","title":"Class Objects"},{"location":"api-documentation/docspec/#metaclass","text":"The metaclass used in the class definition as a code string.","title":"metaclass"},{"location":"api-documentation/docspec/#bases","text":"The list of base classes as code strings.","title":"bases"},{"location":"api-documentation/docspec/#decorations_2","text":"A list of decorations used in the class definition.","title":"decorations"},{"location":"api-documentation/docspec/#members_1","text":"A list of the classes members. Functions in a class are to be considered instance methods of that class unless some information about the Function indicates otherwise.","title":"members"},{"location":"api-documentation/docspec/#module-objects","text":"@dataclasses.dataclass class Module(HasMembers) Represents a module, basically a named container for code/API objects. Modules may be nested in other modules. Be aware that for historical reasons, some loaders lile docspec_python by default do not return nested modules, even if nesting would be appropriate (and instead the Module.name simply contains the fully qualified name).","title":"Module Objects"},{"location":"api-documentation/docspec/#members_2","text":"A list of module members.","title":"members"},{"location":"api-documentation/docspec/#load_module","text":"load_module(source: t.Union[str, t.TextIO, t.Dict[str, t.Any]], filename: t.Optional[str] = None, loader: t.Callable[[t.IO[str]], t.Any] = json.load) -> Module Loads a Module from the specified source , which may be either a filename, a file-like object to read from or plain structured data. Arguments : messages if the deserialization fails. object. Defaults to json.load() . - source : The JSON source to load the module from. - filename : The name of the source. This will be displayed in error - loader : A function for loading plain structured data from a file-like","title":"load_module"},{"location":"api-documentation/docspec/#load_modules","text":"load_modules(source: t.Union[str, t.TextIO, t.Iterable[t.Any]], filename: t.Optional[str] = None, loader: t.Callable[[t.IO[str]], t.Any] = json.load) -> t.Iterable[Module] Loads a stream of modules from the specified source . Similar to load_module() , the source can be a filename, file-like object or a list of plain structured data to deserialize from.","title":"load_modules"},{"location":"api-documentation/docspec/#dump_module","text":"dump_module(module: Module, target: t.Optional[t.Union[str, t.IO[str]]] = None, dumper: t.Callable[[t.Any, t.IO[str]], None] = json.dump) -> t.Optional[t.Dict[str, t.Any]] Dumps a module to the specified target or returns it as plain structured data.","title":"dump_module"},{"location":"api-documentation/docspec/#filter_visit","text":"filter_visit(objects: t.List[ApiObject], predicate: t.Callable[[ApiObject], bool], order: str = 'pre') -> t.List[ApiObject] Visits all objects recursively, applying the predicate in the specified order . If the predicate returrns False , the object will be removed from it's containing list. If an object is removed in pre-order, it's members will not be visited. Arguments : the predicate returns False for an object. in which case the predicate is called before visiting the object's members. The order may also be 'post' . - objects : A list of objects to visit recursively. This list will be modified if - predicate : The function to apply over all visited objects. - order : The order in which the objects are visited. The default order is 'pre'","title":"filter_visit"},{"location":"api-documentation/docspec/#visit","text":"visit(objects: t.List[ApiObject], func: t.Callable[[ApiObject], t.Any], order: str = 'pre') -> None Visits all objects , applying func in the specified order .","title":"visit"},{"location":"api-documentation/docspec/#reversemap-objects","text":"@deprecated.deprecated( version='1.1.0', reason='#docspec.ReverseMap is deprecated and will be removed in a future version, use #ApiObject.parent ' 'and #ApiObject.path instead') class ReverseMap() Reverse map for finding the parent of an ApiObject . @deprecated 1.1.0 -- Use ApiObject.parent and ApiObject.path instead of get_parent() and path() .","title":"ReverseMap Objects"},{"location":"api-documentation/docspec/#get_member","text":"get_member(obj: ApiObject, name: str) -> t.Optional[ApiObject] Generic function to retrieve a member from an API object. This will always return None for objects that don't support members (eg. Function and Data ).","title":"get_member"},{"location":"api-documentation/docspec/#docspec__main__","text":"","title":"docspec.__main__"},{"location":"api-documentation/docspec_python/","text":"docspec_python load_python_modules load_python_modules(modules: t.List[str] = None, packages: t.List[str] = None, files: t.List[t.Tuple[t.Optional[str], t.Union[t.TextIO, str]]] = None, search_path: t.List[str] = None, options: ParserOptions = None, raise_: bool = True, encoding: t.Optional[str] = None) -> t.Iterable[Module] Utility function for loading multiple Modules from a list of Python module and package names. It combines find_module() , iter_package_files() and parse_python_module() in a convenient way. Arguments : file-like object. The module name may be None. - modules : A list of module names to load and parse. - packages : A list of package names to load and parse. - files : A list of (module_name, filename) to parse. The filename may also be a - search_path : The Python module search path. Falls back to sys.path if omitted. - options : Options for the Python module parser. Returns : Iterable of Module . parse_python_module parse_python_module(f: t.Union[str, t.TextIO], filename: str = None, module_name: str = None, options: ParserOptions = None, encoding: t.Optional[str] = None) -> Module Parses Python code of a file or file-like object and returns a Module object with the contents of the file The options are forwarded to the Parser constructor. find_module find_module(module_name: str, search_path: t.List[str] = None) -> str Finds the filename of a module that can be parsed with parse_python_module() . If search_path is not set, the default sys.path is used to search for the module. Raises : ImportError : If the module cannot be found. iter_package_files iter_package_files(package_name: str, search_path: t.List[str] = None) -> t.Iterable[t.Tuple[str, str]] Returns an iterator for the Python source files in the specified package. The items returned by the iterator are tuples of the module name and filename. discover discover(directory: str) -> t.Iterable[DiscoveryResult] Discovers Python modules and packages in the specified directory . The returned generated returns tuples where the first element of the tuple is the type (either 'module' or 'package' ), the second is the name and the third is the path. In case of a package, the path points to the directory. Raises : OSError : Propagated from os.listdir() . format_arglist format_arglist(args: t.List[Argument]) -> str Formats a Python argument list. docspec_python.parser Note: The docspec_python.parser module is not public API. Parser Objects class Parser() parse_to_ast | parse_to_ast(code, filename) Parses the string code to an AST with lib2to3 . parse_argument | parse_argument(node: t.Union[Leaf, Node], argtype: Argument.Type, scanner: 'ListScanner') -> Argument Parses an argument from the AST. node must be the current node at the current position of the scanner . The scanner is used to extract the optional default argument value that follows the node . get_docstring_from_first_node | get_docstring_from_first_node(parent, module_level=False) This method retrieves the docstring for the block node parent . The node either declares a class or function. get_hashtag_docstring_from_prefix | get_hashtag_docstring_from_prefix(node: Node) -> t.Tuple[t.Optional[str], t.Optional[str]] Given a node in the AST, this method retrieves the docstring from the closest prefix of this node (ie. any block of single-line comments that precede this node). The function will also return the type of docstring: A docstring that begins with #: is a statement docstring, otherwise it is a block docstring (and only used for classes/methods). return: (docstring, doc_type) nodes_to_string | nodes_to_string(nodes) Converts a list of AST nodes to a string. ListScanner Objects class ListScanner() A helper class to navigate through a list. This is useful if you would usually iterate over the list by index to be able to acces the next element during the iteration. Example : scanner = ListScanner(lst) for value in scanner.safe_iter(): if some_condition(value): value = scanner.advance() current | @property | current() Returns the current list element. can_advance | can_advance() Returns True if there is a next element in the list. advance | advance(expect=False) Advances the scanner to the next element in the list. If expect is set to True , an IndexError will be raised when there is no next element. Otherwise, None will be returned. safe_iter | safe_iter(auto_advance=True) A useful generator function that iterates over every element in the list. You may call advance() during the iteration to retrieve the next element in the list within a single iteration. If auto_advance is True (default), the function generator will always advance to the next element automatically. If it is set to False , advance() must be called manually in every iteration to ensure that the scanner has advanced at least to the next element, or a RuntimeError will be raised. docspec_python.__main__","title":"docspec_python"},{"location":"api-documentation/docspec_python/#docspec_python","text":"","title":"docspec_python"},{"location":"api-documentation/docspec_python/#load_python_modules","text":"load_python_modules(modules: t.List[str] = None, packages: t.List[str] = None, files: t.List[t.Tuple[t.Optional[str], t.Union[t.TextIO, str]]] = None, search_path: t.List[str] = None, options: ParserOptions = None, raise_: bool = True, encoding: t.Optional[str] = None) -> t.Iterable[Module] Utility function for loading multiple Modules from a list of Python module and package names. It combines find_module() , iter_package_files() and parse_python_module() in a convenient way. Arguments : file-like object. The module name may be None. - modules : A list of module names to load and parse. - packages : A list of package names to load and parse. - files : A list of (module_name, filename) to parse. The filename may also be a - search_path : The Python module search path. Falls back to sys.path if omitted. - options : Options for the Python module parser. Returns : Iterable of Module .","title":"load_python_modules"},{"location":"api-documentation/docspec_python/#parse_python_module","text":"parse_python_module(f: t.Union[str, t.TextIO], filename: str = None, module_name: str = None, options: ParserOptions = None, encoding: t.Optional[str] = None) -> Module Parses Python code of a file or file-like object and returns a Module object with the contents of the file The options are forwarded to the Parser constructor.","title":"parse_python_module"},{"location":"api-documentation/docspec_python/#find_module","text":"find_module(module_name: str, search_path: t.List[str] = None) -> str Finds the filename of a module that can be parsed with parse_python_module() . If search_path is not set, the default sys.path is used to search for the module. Raises : ImportError : If the module cannot be found.","title":"find_module"},{"location":"api-documentation/docspec_python/#iter_package_files","text":"iter_package_files(package_name: str, search_path: t.List[str] = None) -> t.Iterable[t.Tuple[str, str]] Returns an iterator for the Python source files in the specified package. The items returned by the iterator are tuples of the module name and filename.","title":"iter_package_files"},{"location":"api-documentation/docspec_python/#discover","text":"discover(directory: str) -> t.Iterable[DiscoveryResult] Discovers Python modules and packages in the specified directory . The returned generated returns tuples where the first element of the tuple is the type (either 'module' or 'package' ), the second is the name and the third is the path. In case of a package, the path points to the directory. Raises : OSError : Propagated from os.listdir() .","title":"discover"},{"location":"api-documentation/docspec_python/#format_arglist","text":"format_arglist(args: t.List[Argument]) -> str Formats a Python argument list.","title":"format_arglist"},{"location":"api-documentation/docspec_python/#docspec_pythonparser","text":"Note: The docspec_python.parser module is not public API.","title":"docspec_python.parser"},{"location":"api-documentation/docspec_python/#parser-objects","text":"class Parser()","title":"Parser Objects"},{"location":"api-documentation/docspec_python/#parse_to_ast","text":"| parse_to_ast(code, filename) Parses the string code to an AST with lib2to3 .","title":"parse_to_ast"},{"location":"api-documentation/docspec_python/#parse_argument","text":"| parse_argument(node: t.Union[Leaf, Node], argtype: Argument.Type, scanner: 'ListScanner') -> Argument Parses an argument from the AST. node must be the current node at the current position of the scanner . The scanner is used to extract the optional default argument value that follows the node .","title":"parse_argument"},{"location":"api-documentation/docspec_python/#get_docstring_from_first_node","text":"| get_docstring_from_first_node(parent, module_level=False) This method retrieves the docstring for the block node parent . The node either declares a class or function.","title":"get_docstring_from_first_node"},{"location":"api-documentation/docspec_python/#get_hashtag_docstring_from_prefix","text":"| get_hashtag_docstring_from_prefix(node: Node) -> t.Tuple[t.Optional[str], t.Optional[str]] Given a node in the AST, this method retrieves the docstring from the closest prefix of this node (ie. any block of single-line comments that precede this node). The function will also return the type of docstring: A docstring that begins with #: is a statement docstring, otherwise it is a block docstring (and only used for classes/methods). return: (docstring, doc_type)","title":"get_hashtag_docstring_from_prefix"},{"location":"api-documentation/docspec_python/#nodes_to_string","text":"| nodes_to_string(nodes) Converts a list of AST nodes to a string.","title":"nodes_to_string"},{"location":"api-documentation/docspec_python/#listscanner-objects","text":"class ListScanner() A helper class to navigate through a list. This is useful if you would usually iterate over the list by index to be able to acces the next element during the iteration. Example : scanner = ListScanner(lst) for value in scanner.safe_iter(): if some_condition(value): value = scanner.advance()","title":"ListScanner Objects"},{"location":"api-documentation/docspec_python/#current","text":"| @property | current() Returns the current list element.","title":"current"},{"location":"api-documentation/docspec_python/#can_advance","text":"| can_advance() Returns True if there is a next element in the list.","title":"can_advance"},{"location":"api-documentation/docspec_python/#advance","text":"| advance(expect=False) Advances the scanner to the next element in the list. If expect is set to True , an IndexError will be raised when there is no next element. Otherwise, None will be returned.","title":"advance"},{"location":"api-documentation/docspec_python/#safe_iter","text":"| safe_iter(auto_advance=True) A useful generator function that iterates over every element in the list. You may call advance() during the iteration to retrieve the next element in the list within a single iteration. If auto_advance is True (default), the function generator will always advance to the next element automatically. If it is set to False , advance() must be called manually in every iteration to ensure that the scanner has advanced at least to the next element, or a RuntimeError will be raised.","title":"safe_iter"},{"location":"api-documentation/docspec_python/#docspec_python__main__","text":"","title":"docspec_python.__main__"}]}