{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Docspec documentation! Docspec is a JSON object specification for representing API documentation of programming languages. While in it's current form it is targeting Python APIs, it is intended to be able to represent other programming languages in the future as well What is...? docspec The reference implementation for reading/writing the JSON format and API for representing API objects in memory. >> View the Specification . docspec-python A parser for Python packages and modules based on lib2to3 producing docspec API object representations. >> View the Documentation Projects using docspec Pydoc-Markdown \u2013 The original spark for Docspec. Copyright \u00a9 2021, Niklas Rosenstein","title":"Welcome to the Docspec documentation!"},{"location":"#welcome-to-the-docspec-documentation","text":"Docspec is a JSON object specification for representing API documentation of programming languages. While in it's current form it is targeting Python APIs, it is intended to be able to represent other programming languages in the future as well","title":"Welcome to the Docspec documentation!"},{"location":"#what-is","text":"docspec The reference implementation for reading/writing the JSON format and API for representing API objects in memory. >> View the Specification . docspec-python A parser for Python packages and modules based on lib2to3 producing docspec API object representations. >> View the Documentation","title":"What is...?"},{"location":"#projects-using-docspec","text":"Pydoc-Markdown \u2013 The original spark for Docspec. Copyright \u00a9 2021, Niklas Rosenstein","title":"Projects using docspec"},{"location":"specification/","text":"Specification Struct Location The location object describes where the an API object was extracted from a file. Uusally this points to the source file and a line number. The filename should always be relative to the root of a project or source control repository. Field Type Required Description filename str Yes A relative filename (e.g. relative to the project root). lineno int Yes The line number in the filename from which the API object was parsed. endlineno Optional[int] No If the location of an entity spans over multiple lines, it can be indicated by specifying at which line it ends with this property. Struct Docstring Represents the documentation string of an API object. Field Type Required Description content str Yes The content of the docstring. location Optional[Location] No The location where the docstring is defined. This points at the position of the first character in the content field. Struct Indirection Represents an imported name. It can be used to resolve references to names in the API tree to fully qualified names. Field Type Required Description type str Yes The value is \"indirection\" . name str Yes The name that is made available in the scope of the parent object. location Optional[Location] No The location where the indirection is defined. target str Yes The target to which the name points. In the case of Python for example this can be a fully qualified name pointing to a member or a member of a module. In the case of starred imports, the last part is a star (as in os.path.* ). Struct Data A Data object represents a variable or constant. Field Type Required Description type str Yes The value is \"data\" . name str Yes The name of the variable or constant. location Optional[Location] No The location where the variable or constant is defined. docstring Optional[Docstring] No The docstring of the variable or constant. datatype Optional[str] No The name of the type of the variable or constant. value Optional[str] No The value that is assigned to this variable or constant as source code. modifiers Optional[List[str]] No A list of modifier keywords used in the source code to define this variable or constant, like const , static , final , mut , etc. semantic_hints List[DataSemantic] No A list of behavioral properties for this variable or constant. Enumeration DataSemantic Describes possible behavioral properties of a variable or constant. INSTANCE_VARIABLE \u2013 CLASS_VARIABLE \u2013 CONSTANT \u2013 Struct Argument Represents a function argument. Field Type Required Description type ArgumentType Yes The type of argument. name str Yes The name of the argument. datatype Optional[str] No The data type of the argument. default_value Optional[str] No The default value of the argument as a code string. location Optional[Location] No The location of the decoration in the source code. Enumeration ArgumentType POSITIONAL_ONLY \u2013 An argument that can only be given by its position in the argument list. In Python, these are arguments preceeding a / marker in the argument list. Many programming languages support only one type of positional arguments. Loaders for such languages should prefer the POSITIONAL argument type over POSITIONAL_ONLY to describe these type of arguments. POSITIONAL \u2013 POSITIONAL_REMAINDER \u2013 KEYWORD_ONLY \u2013 KEYWORD_REMAINDER \u2013 Struct Decoration Represents a decoration that can be applied to a function or class. Field Type Required Description name str Yes The name of the decorator used in this decoration. This may be a piece of code in languages that support complex decoration syntax. (e.g. in Python, @(decorator_factory().dec)(a, b, c) should be represented as \"(decorator_factory().dec)\" for the name and [\"a\", \"b\", \"c\"] for the args ). args Optional[str] No Deprecated in favor of arglist . A single string that represents the entirety of the argument list for the decorator, excluding the surroinding parentheses. location Optional[Location] No The location of the decoration in the source code. arglist Optional[List[str]] No A list of the raw source code for each argument of the decorator. If this is not set, that means the decorator is not called. If the list is empty, the decorator is called without arguments. For example if the full decoration code is @(decorator_factory().dec)(a, b, c) , this field's value would be [\"a\", \"b\", \"c\"] . Struct Function Represents a function definition in a module or class. Field Type Required Description type str Yes Value is \"function\" name str Yes The name of the function. location Optional[Location] No docstring Optional[Docstring] No modifiers Optional[List[str]] No An list of modifier keywords that the function was defined with. args List[Argument] Yes The function arguments. return_type Optional[str] No The return type of the function. decorations Optional[List[Decoration]] No The list of decorations attached to the function. semantic_hints List[FunctionSemantic] No A list of behavioral properties for this function. Enumeration FunctionSemantic ABSTRACT \u2013 FINAL \u2013 COROUTINE \u2013 NO_RETURN \u2013 INSTANCE_METHOD \u2013 CLASS_METHOD \u2013 STATIC_METHOD \u2013 PROPERTY_GETTER \u2013 PROPERTY_SETTER \u2013 PROPERTY_DELETER \u2013 Struct Class Represents a class definition. Field Type Required Description type str Yes The value is \"class\" . name str Yes The name of the class. location Optional[Location] No docstring Optional[Docstring] No metaclass Optional[str] No The name of the metaclass used in this class definition. bases Optional[List[str]] No A list of the base classes that the class inherits from. members List[Data | Function | Class] Yes A list of the members of the class. decorations Optional[List[Decoration]] No A list of the decorations applied to the class definition. modifiers Optional[List[str]] No A list of the modifier keywords used to declare this class. semantic_hints List[ClassSemantic] No A list of the semantic hints for this class. Enumeration ClassSemantic INTERFACE \u2013 ABSTRACT \u2013 FINAL \u2013 ENUM \u2013 Struct Module A module represents a collection of data, function and classes. In the Python language, it represents an actual Python module. In other languages it may refer to another file type or a namespace. Field Type Required Description type str Yes The value is \"module\" . name str Yes The name of the module. The name is supposed to be relative to the parent. location Optional[Location] No The location of the module. Usually the line number will be 0 . docstring Optional[Docstring] No The docstring for the module as parsed from the source. members List[Class | Data | Function | Module] Yes A list of the module members.","title":"Specification"},{"location":"specification/#specification","text":"","title":"Specification"},{"location":"specification/#struct-location","text":"The location object describes where the an API object was extracted from a file. Uusally this points to the source file and a line number. The filename should always be relative to the root of a project or source control repository. Field Type Required Description filename str Yes A relative filename (e.g. relative to the project root). lineno int Yes The line number in the filename from which the API object was parsed. endlineno Optional[int] No If the location of an entity spans over multiple lines, it can be indicated by specifying at which line it ends with this property.","title":"Struct Location"},{"location":"specification/#struct-docstring","text":"Represents the documentation string of an API object. Field Type Required Description content str Yes The content of the docstring. location Optional[Location] No The location where the docstring is defined. This points at the position of the first character in the content field.","title":"Struct Docstring"},{"location":"specification/#struct-indirection","text":"Represents an imported name. It can be used to resolve references to names in the API tree to fully qualified names. Field Type Required Description type str Yes The value is \"indirection\" . name str Yes The name that is made available in the scope of the parent object. location Optional[Location] No The location where the indirection is defined. target str Yes The target to which the name points. In the case of Python for example this can be a fully qualified name pointing to a member or a member of a module. In the case of starred imports, the last part is a star (as in os.path.* ).","title":"Struct Indirection"},{"location":"specification/#struct-data","text":"A Data object represents a variable or constant. Field Type Required Description type str Yes The value is \"data\" . name str Yes The name of the variable or constant. location Optional[Location] No The location where the variable or constant is defined. docstring Optional[Docstring] No The docstring of the variable or constant. datatype Optional[str] No The name of the type of the variable or constant. value Optional[str] No The value that is assigned to this variable or constant as source code. modifiers Optional[List[str]] No A list of modifier keywords used in the source code to define this variable or constant, like const , static , final , mut , etc. semantic_hints List[DataSemantic] No A list of behavioral properties for this variable or constant.","title":"Struct Data"},{"location":"specification/#enumeration-datasemantic","text":"Describes possible behavioral properties of a variable or constant. INSTANCE_VARIABLE \u2013 CLASS_VARIABLE \u2013 CONSTANT \u2013","title":"Enumeration DataSemantic"},{"location":"specification/#struct-argument","text":"Represents a function argument. Field Type Required Description type ArgumentType Yes The type of argument. name str Yes The name of the argument. datatype Optional[str] No The data type of the argument. default_value Optional[str] No The default value of the argument as a code string. location Optional[Location] No The location of the decoration in the source code.","title":"Struct Argument"},{"location":"specification/#enumeration-argumenttype","text":"POSITIONAL_ONLY \u2013 An argument that can only be given by its position in the argument list. In Python, these are arguments preceeding a / marker in the argument list. Many programming languages support only one type of positional arguments. Loaders for such languages should prefer the POSITIONAL argument type over POSITIONAL_ONLY to describe these type of arguments. POSITIONAL \u2013 POSITIONAL_REMAINDER \u2013 KEYWORD_ONLY \u2013 KEYWORD_REMAINDER \u2013","title":"Enumeration ArgumentType"},{"location":"specification/#struct-decoration","text":"Represents a decoration that can be applied to a function or class. Field Type Required Description name str Yes The name of the decorator used in this decoration. This may be a piece of code in languages that support complex decoration syntax. (e.g. in Python, @(decorator_factory().dec)(a, b, c) should be represented as \"(decorator_factory().dec)\" for the name and [\"a\", \"b\", \"c\"] for the args ). args Optional[str] No Deprecated in favor of arglist . A single string that represents the entirety of the argument list for the decorator, excluding the surroinding parentheses. location Optional[Location] No The location of the decoration in the source code. arglist Optional[List[str]] No A list of the raw source code for each argument of the decorator. If this is not set, that means the decorator is not called. If the list is empty, the decorator is called without arguments. For example if the full decoration code is @(decorator_factory().dec)(a, b, c) , this field's value would be [\"a\", \"b\", \"c\"] .","title":"Struct Decoration"},{"location":"specification/#struct-function","text":"Represents a function definition in a module or class. Field Type Required Description type str Yes Value is \"function\" name str Yes The name of the function. location Optional[Location] No docstring Optional[Docstring] No modifiers Optional[List[str]] No An list of modifier keywords that the function was defined with. args List[Argument] Yes The function arguments. return_type Optional[str] No The return type of the function. decorations Optional[List[Decoration]] No The list of decorations attached to the function. semantic_hints List[FunctionSemantic] No A list of behavioral properties for this function.","title":"Struct Function"},{"location":"specification/#enumeration-functionsemantic","text":"ABSTRACT \u2013 FINAL \u2013 COROUTINE \u2013 NO_RETURN \u2013 INSTANCE_METHOD \u2013 CLASS_METHOD \u2013 STATIC_METHOD \u2013 PROPERTY_GETTER \u2013 PROPERTY_SETTER \u2013 PROPERTY_DELETER \u2013","title":"Enumeration FunctionSemantic"},{"location":"specification/#struct-class","text":"Represents a class definition. Field Type Required Description type str Yes The value is \"class\" . name str Yes The name of the class. location Optional[Location] No docstring Optional[Docstring] No metaclass Optional[str] No The name of the metaclass used in this class definition. bases Optional[List[str]] No A list of the base classes that the class inherits from. members List[Data | Function | Class] Yes A list of the members of the class. decorations Optional[List[Decoration]] No A list of the decorations applied to the class definition. modifiers Optional[List[str]] No A list of the modifier keywords used to declare this class. semantic_hints List[ClassSemantic] No A list of the semantic hints for this class.","title":"Struct Class"},{"location":"specification/#enumeration-classsemantic","text":"INTERFACE \u2013 ABSTRACT \u2013 FINAL \u2013 ENUM \u2013","title":"Enumeration ClassSemantic"},{"location":"specification/#struct-module","text":"A module represents a collection of data, function and classes. In the Python language, it represents an actual Python module. In other languages it may refer to another file type or a namespace. Field Type Required Description type str Yes The value is \"module\" . name str Yes The name of the module. The name is supposed to be relative to the parent. location Optional[Location] No The location of the module. Usually the line number will be 0 . docstring Optional[Docstring] No The docstring for the module as parsed from the source. members List[Class | Data | Function | Module] Yes A list of the module members.","title":"Struct Module"},{"location":"api/docspec-python/","text":"@pydoc docspec_python","title":"Docspec python"},{"location":"api/docspec/","text":"@pydoc docspec","title":"Docspec"},{"location":"changelog/docspec-python/","text":"Docspec-Python Changelog Unreleased Type Description PR Issues Author Fix strip whitespace around `Class.bases` 55 53 @NiklasRosenstein Tests add `test_funcdef_7_posonly_args` unit test to test various more combinations of function arguments, including `POSITIONAL_ONLY`) 58 57 @NiklasRosenstein, @tristanlatr Refactor use `nr.util.scanner.Scanner` instead of homebrew `ListScanner` class 58 @NiklasRosenstein Fix fix parsing of positional only arguments 58 57 @NiklasRosenstein 1.2.0 (2021-09-24) Type Description PR Issues Author Feature add `format_arglist(render_type_hints)` argument @NiklasRosenstein 1.1.1 (2021-08-27) Type Description PR Issues Author Fix support imports on the class-level 34 @NiklasRosenstein 1.1.0 (2021-08-27) Type Description PR Issues Author Feature add support for the `Docstring` class now used in `ApiObject.docstring` since `docspec 1.1.0` @NiklasRosenstein Feature add support for `Indirection`s (from parsed Python imports) @NiklasRosenstein 1.0.0 (2021-07-21) Type Description PR Issues Author Breaking change Migrate to using `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databind.json`. @NiklasRosenstein Fix fix parsing of lib2to3 syntax tree if class does not have a suite (e.g., \"pass\" on the same line as the class definition) @NiklasRosenstein 0.2.0 (2021-05-29) Type Description PR Issues Author Improvement republish 0.1.1 as 0.2.0 @NiklasRosenstein 0.1.1 (2021-05-21) Type Description PR Issues Author Improvement update type hints, use `@dataclass` over `nr.sumtype` which has MyPy support @NiklasRosenstein Fix fix `discover()` to ignore Python files with more than one dot in it @NiklasRosenstein 0.1.0 (2021-02-20) Type Description PR Issues Author Fix Fix `NameError` in function type annotation @NiklasRosenstein Feature add `encoding` parameter to `load_python_modules()` and `parse_python_module()` @NiklasRosenstein 0.0.7 (2020-07-16) Type Description PR Issues Author Tests fix test cases @NiklasRosenstein Improvement no longer use `pkgutil.find_loader()` to find Python modules as it prefers modules that are already in `sys.modules` even if that instance of the module would not occurr in the specified `search_path`. `docspec_python.find_module()` now re-implements the search mechanism @NiklasRosenstein Tests add tests for Python module loader logic @NiklasRosenstein Fix fix support for Python 3.5 @NiklasRosenstein 0.0.6 (2020-07-16) Type Description PR Issues Author Fix fix `iter_package_files()` which would not respect the `search_path` argument @NiklasRosenstein 0.0.5 (2020-07-06) Type Description PR Issues Author Improvement Update calls to `ApiObject` subclasses to pass keyword arguments only (as is required in `docspec >=0.2.0`) @NiklasRosenstein Fix Fix derivation of Python module name from name of file on disk (before it would accidentally strip trailing p's or y's from the name). @NiklasRosenstein","title":"Docspec-Python Changelog"},{"location":"changelog/docspec-python/#docspec-python-changelog","text":"","title":"Docspec-Python Changelog"},{"location":"changelog/docspec-python/#unreleased","text":"Type Description PR Issues Author Fix strip whitespace around `Class.bases` 55 53 @NiklasRosenstein Tests add `test_funcdef_7_posonly_args` unit test to test various more combinations of function arguments, including `POSITIONAL_ONLY`) 58 57 @NiklasRosenstein, @tristanlatr Refactor use `nr.util.scanner.Scanner` instead of homebrew `ListScanner` class 58 @NiklasRosenstein Fix fix parsing of positional only arguments 58 57 @NiklasRosenstein","title":"Unreleased"},{"location":"changelog/docspec-python/#120-2021-09-24","text":"Type Description PR Issues Author Feature add `format_arglist(render_type_hints)` argument @NiklasRosenstein","title":"1.2.0 (2021-09-24)"},{"location":"changelog/docspec-python/#111-2021-08-27","text":"Type Description PR Issues Author Fix support imports on the class-level 34 @NiklasRosenstein","title":"1.1.1 (2021-08-27)"},{"location":"changelog/docspec-python/#110-2021-08-27","text":"Type Description PR Issues Author Feature add support for the `Docstring` class now used in `ApiObject.docstring` since `docspec 1.1.0` @NiklasRosenstein Feature add support for `Indirection`s (from parsed Python imports) @NiklasRosenstein","title":"1.1.0 (2021-08-27)"},{"location":"changelog/docspec-python/#100-2021-07-21","text":"Type Description PR Issues Author Breaking change Migrate to using `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databind.json`. @NiklasRosenstein Fix fix parsing of lib2to3 syntax tree if class does not have a suite (e.g., \"pass\" on the same line as the class definition) @NiklasRosenstein","title":"1.0.0 (2021-07-21)"},{"location":"changelog/docspec-python/#020-2021-05-29","text":"Type Description PR Issues Author Improvement republish 0.1.1 as 0.2.0 @NiklasRosenstein","title":"0.2.0 (2021-05-29)"},{"location":"changelog/docspec-python/#011-2021-05-21","text":"Type Description PR Issues Author Improvement update type hints, use `@dataclass` over `nr.sumtype` which has MyPy support @NiklasRosenstein Fix fix `discover()` to ignore Python files with more than one dot in it @NiklasRosenstein","title":"0.1.1 (2021-05-21)"},{"location":"changelog/docspec-python/#010-2021-02-20","text":"Type Description PR Issues Author Fix Fix `NameError` in function type annotation @NiklasRosenstein Feature add `encoding` parameter to `load_python_modules()` and `parse_python_module()` @NiklasRosenstein","title":"0.1.0 (2021-02-20)"},{"location":"changelog/docspec-python/#007-2020-07-16","text":"Type Description PR Issues Author Tests fix test cases @NiklasRosenstein Improvement no longer use `pkgutil.find_loader()` to find Python modules as it prefers modules that are already in `sys.modules` even if that instance of the module would not occurr in the specified `search_path`. `docspec_python.find_module()` now re-implements the search mechanism @NiklasRosenstein Tests add tests for Python module loader logic @NiklasRosenstein Fix fix support for Python 3.5 @NiklasRosenstein","title":"0.0.7 (2020-07-16)"},{"location":"changelog/docspec-python/#006-2020-07-16","text":"Type Description PR Issues Author Fix fix `iter_package_files()` which would not respect the `search_path` argument @NiklasRosenstein","title":"0.0.6 (2020-07-16)"},{"location":"changelog/docspec-python/#005-2020-07-06","text":"Type Description PR Issues Author Improvement Update calls to `ApiObject` subclasses to pass keyword arguments only (as is required in `docspec >=0.2.0`) @NiklasRosenstein Fix Fix derivation of Python module name from name of file on disk (before it would accidentally strip trailing p's or y's from the name). @NiklasRosenstein","title":"0.0.5 (2020-07-06)"},{"location":"changelog/docspec/","text":"Docspec Changelog Unreleased Type Description PR Issues Author Fix update `specification.yml` to show correct types of `Argument.location`, `Decoration.location` and `Module.location` 56 52 @NiklasRosenstein 1.2.0 (2021-09-24) Type Description PR Issues Author Feature add `Data.modifiers`, `Data.semantic_hints`, `Class.modifiers`, `Class.semantic_hints` and `Function.semantic_hints` 30 @NiklasRosenstein Improvement rename `Argument.Type` enumeration values to `UPPER_CASE` format according to latest specification (full backwards compatibility, including deserializing JSON payloads with the old argument type names) @NiklasRosenstein Feature add `Argument.location` and `Decoration.location` properties 28 @NiklasRosenstein Feature add `Location.endlineno` property to spec 32 @NiklasRosenstein Improvement add `Decoration.arglist`, document that `Decoration.args` is deprecated @NiklasRosenstein 1.1.0 (2021-08-27) Type Description PR Issues Author Feature add `ApiObject.parent` and `ApiObject.path` to deprecate `ReverseMap` class @NiklasRosenstein Feature add `ApiObject.sync_hierarchy()` method @NiklasRosenstein Feature introduce `HasMembers` base class for `Class` and `Module`, `Module.members` can now container other modules 15 @NiklasRosenstein Improvement `get_member()` and `filter_visit()` have been updated to make use of the `HasMembers` base class instead of relying on `hasattr()`/`getattr()` @NiklasRosenstein Feature add `Indirection` class to keep track of imports and resolve names correctly. @tristanlatr Feature add `Docstring` class which represents the docstring, plus the location of the docstring @NiklasRosenstein 1.0.2 (2021-07-29) Type Description PR Issues Author Fix Add some type annotations 14 @tristanlatr 1.0.1 (2021-07-22) Type Description PR Issues Author Fix `docspec.get_members()` access object members wrong @NiklasRosenstein 1.0.0 (2021-07-21) Type Description PR Issues Author Breaking change Migrate to using `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databind.json`. @NiklasRosenstein 0.2.1 (2021-02-21) Type Description PR Issues Author Fix fix dependencies @NiklasRosenstein 0.2.0 (2020-07-06) Type Description PR Issues Author Improvement `ApiObject` constructors now accept keyword arguments only @NiklasRosenstein Improvement All `nullable` fields now have `default=None` @NiklasRosenstein Improvement Many serializable classes are now decorated with `SkipDefaults()` @NiklasRosenstein","title":"Docspec Changelog"},{"location":"changelog/docspec/#docspec-changelog","text":"","title":"Docspec Changelog"},{"location":"changelog/docspec/#unreleased","text":"Type Description PR Issues Author Fix update `specification.yml` to show correct types of `Argument.location`, `Decoration.location` and `Module.location` 56 52 @NiklasRosenstein","title":"Unreleased"},{"location":"changelog/docspec/#120-2021-09-24","text":"Type Description PR Issues Author Feature add `Data.modifiers`, `Data.semantic_hints`, `Class.modifiers`, `Class.semantic_hints` and `Function.semantic_hints` 30 @NiklasRosenstein Improvement rename `Argument.Type` enumeration values to `UPPER_CASE` format according to latest specification (full backwards compatibility, including deserializing JSON payloads with the old argument type names) @NiklasRosenstein Feature add `Argument.location` and `Decoration.location` properties 28 @NiklasRosenstein Feature add `Location.endlineno` property to spec 32 @NiklasRosenstein Improvement add `Decoration.arglist`, document that `Decoration.args` is deprecated @NiklasRosenstein","title":"1.2.0 (2021-09-24)"},{"location":"changelog/docspec/#110-2021-08-27","text":"Type Description PR Issues Author Feature add `ApiObject.parent` and `ApiObject.path` to deprecate `ReverseMap` class @NiklasRosenstein Feature add `ApiObject.sync_hierarchy()` method @NiklasRosenstein Feature introduce `HasMembers` base class for `Class` and `Module`, `Module.members` can now container other modules 15 @NiklasRosenstein Improvement `get_member()` and `filter_visit()` have been updated to make use of the `HasMembers` base class instead of relying on `hasattr()`/`getattr()` @NiklasRosenstein Feature add `Indirection` class to keep track of imports and resolve names correctly. @tristanlatr Feature add `Docstring` class which represents the docstring, plus the location of the docstring @NiklasRosenstein","title":"1.1.0 (2021-08-27)"},{"location":"changelog/docspec/#102-2021-07-29","text":"Type Description PR Issues Author Fix Add some type annotations 14 @tristanlatr","title":"1.0.2 (2021-07-29)"},{"location":"changelog/docspec/#101-2021-07-22","text":"Type Description PR Issues Author Fix `docspec.get_members()` access object members wrong @NiklasRosenstein","title":"1.0.1 (2021-07-22)"},{"location":"changelog/docspec/#100-2021-07-21","text":"Type Description PR Issues Author Breaking change Migrate to using `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databind.json`. @NiklasRosenstein","title":"1.0.0 (2021-07-21)"},{"location":"changelog/docspec/#021-2021-02-21","text":"Type Description PR Issues Author Fix fix dependencies @NiklasRosenstein","title":"0.2.1 (2021-02-21)"},{"location":"changelog/docspec/#020-2020-07-06","text":"Type Description PR Issues Author Improvement `ApiObject` constructors now accept keyword arguments only @NiklasRosenstein Improvement All `nullable` fields now have `default=None` @NiklasRosenstein Improvement Many serializable classes are now decorated with `SkipDefaults()` @NiklasRosenstein","title":"0.2.0 (2020-07-06)"}]}