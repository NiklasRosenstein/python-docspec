{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Docspec documentation!","text":"<p>Docspec is a JSON object specification for representing API documentation of programming languages. While in it's current form it is targeting Python APIs, it is intended to be able to represent other programming languages in the future as well</p>"},{"location":"#what-is","title":"What is...?","text":"<p>docspec</p> <p>The reference implementation for reading/writing the JSON format and API for representing API objects in memory.</p> <p>&gt;&gt; View the Specification.</p> <p>docspec-python</p> <p>A parser for Python packages and modules based on <code>lib2to3</code> producing <code>docspec</code> API object representations.</p> <p>&gt;&gt; View the Documentation</p>"},{"location":"#projects-using-docspec","title":"Projects using <code>docspec</code>","text":"<ul> <li>Pydoc-Markdown \u2013 The original spark for Docspec.</li> </ul> <p>Copyright \u00a9 2021, Niklas Rosenstein</p>"},{"location":"specification/","title":"Specification","text":""},{"location":"specification/#struct-location","title":"Struct <code>Location</code>","text":"<p>The location object describes where the an API object was extracted from a file. Uusally this points to the source file and a line number. The filename should always be relative to the root of a project or source control repository.</p> Field Type Required Description <code>filename</code> <code>str</code> Yes A relative filename (e.g. relative to the project root). <code>lineno</code> <code>int</code> Yes The line number in the filename from which the API object was parsed. <code>endlineno</code> <code>Optional[int]</code> No If the location of an entity spans over multiple lines, it can be indicated by specifying at which line it ends with this property."},{"location":"specification/#struct-docstring","title":"Struct <code>Docstring</code>","text":"<p>Represents the documentation string of an API object.</p> Field Type Required Description <code>location</code> <code>Location</code> Yes The location where the docstring is defined. This points at the position of the first character in the content field. <code>content</code> <code>str</code> Yes The content of the docstring."},{"location":"specification/#struct-indirection","title":"Struct <code>Indirection</code>","text":"<p>Represents an imported name. It can be used to resolve references to names in the API tree to fully qualified names.</p> Field Type Required Description <code>type</code> <code>str</code> Yes The value is <code>\"indirection\"</code>. <code>location</code> <code>Location</code> Yes The location where the indirection is defined. <code>name</code> <code>str</code> Yes The name that is made available in the scope of the parent object. <code>target</code> <code>str</code> Yes The target to which the name points. In the case of Python for example this can be a fully qualified name pointing to a member or a member of a module. In the case of starred imports, the last part is a star (as in <code>os.path.*</code>)."},{"location":"specification/#struct-variable","title":"Struct <code>Variable</code>","text":"<p>A <code>Variable</code> object represents a variable or constant.</p> Field Type Required Description <code>type</code> <code>str</code> Yes The value is <code>\"data\"</code>. <code>location</code> <code>Location</code> Yes The location where the variable or constant is defined. <code>name</code> <code>str</code> Yes The name of the variable or constant. <code>docstring</code> <code>Optional[Docstring]</code> No The docstring of the variable or constant. <code>datatype</code> <code>Optional[str]</code> No The name of the type of the variable or constant. <code>value</code> <code>Optional[str]</code> No The value that is assigned to this variable or constant as source code. <code>modifiers</code> <code>Optional[List[str]]</code> No A list of modifier keywords used in the source code to define this variable or constant, like <code>const</code>, <code>static</code>, <code>final</code>, <code>mut</code>, etc. <code>semantic_hints</code> <code>List[VariableSemantic]</code> No A list of behavioral properties for this variable or constant."},{"location":"specification/#enumeration-variablesemantic","title":"Enumeration <code>VariableSemantic</code>","text":"<p>Describes possible behavioral properties of a variable or constant.</p> <ul> <li><code>INSTANCE_VARIABLE</code> \u2013 </li> <li><code>CLASS_VARIABLE</code> \u2013 </li> <li><code>CONSTANT</code> \u2013 </li> </ul>"},{"location":"specification/#struct-argument","title":"Struct <code>Argument</code>","text":"<p>Represents a function argument.</p> Field Type Required Description <code>location</code> <code>Location</code> Yes The location of the decoration in the source code. <code>name</code> <code>str</code> Yes The name of the argument. <code>type</code> <code>ArgumentType</code> Yes The type of argument. <code>datatype</code> <code>Optional[str]</code> No The data type of the argument. <code>default_value</code> <code>Optional[str]</code> No The default value of the argument as a code string."},{"location":"specification/#enumeration-argumenttype","title":"Enumeration <code>ArgumentType</code>","text":"<ul> <li><code>POSITIONAL_ONLY</code> \u2013 An argument that can only be given by its position in the argument list. In Python, these are arguments preceeding a <code>/</code> marker in the argument list. Many programming languages support only one type of positional arguments. Loaders for such languages should prefer the <code>POSITIONAL</code> argument type over <code>POSITIONAL_ONLY</code> to describe these type of arguments.</li> <li><code>POSITIONAL</code> \u2013 </li> <li><code>POSITIONAL_REMAINDER</code> \u2013 </li> <li><code>KEYWORD_ONLY</code> \u2013 </li> <li><code>KEYWORD_REMAINDER</code> \u2013 </li> </ul>"},{"location":"specification/#struct-decoration","title":"Struct <code>Decoration</code>","text":"<p>Represents a decoration that can be applied to a function or class.</p> Field Type Required Description <code>location</code> <code>Location</code> Yes The location of the decoration in the source code. <code>name</code> <code>str</code> Yes The name of the decorator used in this decoration. This may be a piece of code in languages that support complex decoration syntax. (e.g. in Python, <code>@(decorator_factory().dec)(a, b, c)</code> should be represented as <code>\"(decorator_factory().dec)\"</code> for the <code>name</code> and <code>[\"a\", \"b\", \"c\"]</code> for the <code>args</code>). <code>args</code> <code>Optional[str]</code> No Deprecated in favor of <code>arglist</code>. A single string that represents the entirety of the argument list for the decorator, excluding the surroinding parentheses. <code>arglist</code> <code>Optional[List[str]]</code> No A list of the raw source code for each argument of the decorator. If this is not set, that means the decorator is not called. If the list is empty, the decorator is called without arguments. For example if the full decoration code is <code>@(decorator_factory().dec)(a, b, c)</code>, this field's value would be <code>[\"a\", \"b\", \"c\"]</code>."},{"location":"specification/#struct-function","title":"Struct <code>Function</code>","text":"<p>Represents a function definition in a module or class.</p> Field Type Required Description <code>type</code> <code>str</code> Yes Value is <code>\"function\"</code> <code>location</code> <code>Location</code> Yes <code>name</code> <code>str</code> Yes The name of the function. <code>docstring</code> <code>Optional[Docstring]</code> No <code>modifiers</code> <code>Optional[List[str]]</code> No An list of modifier keywords that the function was defined with. <code>args</code> <code>List[Argument]</code> Yes The function arguments. <code>return_type</code> <code>Optional[str]</code> No The return type of the function. <code>decorations</code> <code>Optional[List[Decoration]]</code> No The list of decorations attached to the function. <code>semantic_hints</code> <code>List[FunctionSemantic]</code> No A list of behavioral properties for this function."},{"location":"specification/#enumeration-functionsemantic","title":"Enumeration <code>FunctionSemantic</code>","text":"<ul> <li><code>ABSTRACT</code> \u2013 </li> <li><code>FINAL</code> \u2013 </li> <li><code>COROUTINE</code> \u2013 </li> <li><code>NO_RETURN</code> \u2013 </li> <li><code>INSTANCE_METHOD</code> \u2013 </li> <li><code>CLASS_METHOD</code> \u2013 </li> <li><code>STATIC_METHOD</code> \u2013 </li> <li><code>PROPERTY_GETTER</code> \u2013 </li> <li><code>PROPERTY_SETTER</code> \u2013 </li> <li><code>PROPERTY_DELETER</code> \u2013 </li> </ul>"},{"location":"specification/#struct-class","title":"Struct <code>Class</code>","text":"<p>Represents a class definition.</p> Field Type Required Description <code>type</code> <code>str</code> Yes The value is <code>\"class\"</code>. <code>location</code> <code>Location</code> Yes <code>name</code> <code>str</code> Yes The name of the class. <code>docstring</code> <code>Optional[Docstring]</code> No <code>metaclass</code> <code>Optional[str]</code> No The name of the metaclass used in this class definition. <code>bases</code> <code>Optional[List[str]]</code> No A list of the base classes that the class inherits from. <code>members</code> <code>List[Variable | Function | Class]</code> Yes A list of the members of the class. <code>decorations</code> <code>Optional[List[Decoration]]</code> No A list of the decorations applied to the class definition. <code>modifiers</code> <code>Optional[List[str]]</code> No A list of the modifier keywords used to declare this class. <code>semantic_hints</code> <code>List[ClassSemantic]</code> No A list of the semantic hints for this class."},{"location":"specification/#enumeration-classsemantic","title":"Enumeration <code>ClassSemantic</code>","text":"<ul> <li><code>INTERFACE</code> \u2013 </li> <li><code>ABSTRACT</code> \u2013 </li> <li><code>FINAL</code> \u2013 </li> <li><code>ENUM</code> \u2013 </li> </ul>"},{"location":"specification/#struct-module","title":"Struct <code>Module</code>","text":"<p>A module represents a collection of data, function and classes. In the Python language, it represents an actual Python module. In other languages it may refer to another file type or a namespace.</p> Field Type Required Description <code>type</code> <code>str</code> Yes The value is <code>\"module\"</code>. <code>location</code> <code>Location</code> Yes The location of the module. Usually the line number will be <code>0</code>. <code>name</code> <code>str</code> Yes The name of the module. The name is supposed to be relative to the parent. <code>docstring</code> <code>Optional[Docstring]</code> No The docstring for the module as parsed from the source. <code>members</code> <code>List[Class | Variable | Function | Module]</code> Yes A list of the module members."},{"location":"api/docspec-python/","title":"docspec-python","text":""},{"location":"api/docspec-python/#load_python_modules","title":"load_python_modules","text":"<pre><code>def load_python_modules(\n    modules: t.Optional[t.Sequence[str]] = None,\n    packages: t.Optional[t.Sequence[str]] = None,\n    search_path: t.Optional[t.Sequence[t.Union[str, Path]]] = None,\n    options: t.Optional[ParserOptions] = None,\n    raise_: bool = True,\n    encoding: t.Optional[str] = None,\n    *,\n    files: t.Optional[t.Sequence[t.Tuple[str,\n                                         str]]] = None) -&gt; t.Iterable[Module]\n</code></pre> <p>[view_source]</p> <p>Utility function for loading multiple Modules from a list of Python module and package names. It combines find_module(), iter_package_files() and parse_python_module() in a convenient way.</p> <p>Arguments</p> <ul> <li>modules: A list of module names to load and parse.</li> <li>packages: A list of package names to load and parse.</li> <li>search_path: The Python module search path. Falls back to <code>sys.path</code> if omitted.</li> <li>options: Options for the Python module parser.</li> <li>files: A list of <code>(module_name, filename)</code> tuples to parse.</li> </ul> <p>Returns</p> <p>Iterable of Module.</p> <p></p> <p></p>"},{"location":"api/docspec-python/#parse_python_module","title":"parse_python_module","text":"<pre><code>def parse_python_module(fp: t.Union[str, Path, t.TextIO],\n                        filename: t.Union[str, Path, None] = None,\n                        module_name: t.Optional[str] = None,\n                        options: t.Optional[ParserOptions] = None,\n                        encoding: t.Optional[str] = None) -&gt; Module\n</code></pre> <p>[view_source]</p> <p>Parses Python code of a file or file-like object and returns a Module object with the contents of the file The options are forwarded to the {@link pydoc:docspec_python.parser.Parser} constructor.</p> <p></p> <p></p>"},{"location":"api/docspec-python/#find_module","title":"find_module","text":"<pre><code>def find_module(\n        module_name: str,\n        search_path: t.Optional[t.Sequence[t.Union[str, Path]]] = None) -&gt; str\n</code></pre> <p>[view_source]</p> <p>Finds the filename of a module that can be parsed with parse_python_module(). If search_path is not set,</p> <p>the default <code>sys.path</code> is used to search for the module. If module_name is a Python package, it will return the path to the package's <code>__init__.py</code> file. If the module does not exist, an <code>ImportError</code> is raised. This is also true for PEP 420 namespace packages that do not provide an <code>__init__.py</code> file.</p> <p>Raises:</p> <ul> <li><code>ImportError</code>: If the module cannot be found.</li> </ul> <p></p> <p></p>"},{"location":"api/docspec-python/#iter_package_files","title":"iter_package_files","text":"<pre><code>def iter_package_files(\n    package_name: str,\n    search_path: t.Optional[t.Sequence[t.Union[str, Path]]] = None\n) -&gt; t.Iterable[t.Tuple[str, str]]\n</code></pre> <p>[view_source]</p> <p>Returns an iterator for the Python source files in the specified package. The items returned by the iterator are tuples of the module name and filename. Supports a PEP 420 namespace package if at least one matching directory with at least one Python source file in it is found.</p> <p></p> <p></p>"},{"location":"api/docspec-python/#discover","title":"discover","text":"<pre><code>def discover(directory: t.Union[str, Path]) -&gt; t.Iterable[DiscoveryResult]\n</code></pre> <p>[view_source]</p> <p>Discovers Python modules and packages in the specified directory. The returned generated</p> <p>returns tuples where the first element of the tuple is the type (either <code>'module'</code> or <code>'package'</code>), the second is the name and the third is the path. In case of a package, the path points to the directory.</p> <p>Raises:</p> <ul> <li><code>OSError</code>: Propagated from <code>os.listdir()</code>.</li> </ul> <p></p> <p></p>"},{"location":"api/docspec-python/#format_arglist","title":"format_arglist","text":"<pre><code>def format_arglist(args: t.Sequence[Argument],\n                   render_type_hints: bool = True) -&gt; str\n</code></pre> <p>[view_source]</p> <p>Formats a Python argument list.</p>"},{"location":"api/docspec/","title":"docspec","text":""},{"location":"api/docspec/#class-location","title":"Class Location","text":"<pre><code>@dataclasses.dataclass\nclass Location()\n</code></pre> <p>[view_source]</p> <p>Represents the location of an ApiObject by a filename and line number.</p> <p></p> <p></p>"},{"location":"api/docspec/#endlineno","title":"endlineno","text":"<p>If the location of an entity spans over multiple lines, it can be indicated by specifying at which line it ends with this property.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-docstring","title":"Class Docstring","text":"<pre><code>@dataclasses.dataclass\nclass Docstring()\n</code></pre> <p>[view_source]</p> <p>Represents a docstring for an <code>APIObject</code>, i.e. it's content and location. This class is a subclass of <code>str</code> for backwards compatibility reasons. Use the content property to access the docstring content over the Docstring value directory.</p> <p></p> <p></p>"},{"location":"api/docspec/#location","title":"location","text":"<p>The location of where the docstring is defined.</p> <p></p> <p></p>"},{"location":"api/docspec/#content","title":"content","text":"<p>The content of the docstring. While the Docstring class is a subclass of <code>str</code> and holds the same value as content, using the content property should be preferred as the inheritance from the <code>str</code> class may be removed in future versions.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-decoration","title":"Class Decoration","text":"<pre><code>@dataclasses.dataclass\nclass Decoration()\n</code></pre> <p>[view_source]</p> <p>Represents a decorator on a Class or Function.</p> <p></p> <p></p>"},{"location":"api/docspec/#location_1","title":"location","text":"<p>The location of the decoration in the source code.</p> <p></p> <p></p>"},{"location":"api/docspec/#name","title":"name","text":"<p>The name of the decorator (i.e. the text between the <code>@</code> and <code>(</code>). In languages that support it, this may be a piece of code.</p> <p></p> <p></p>"},{"location":"api/docspec/#args","title":"args","text":"<p>Decorator arguments as plain code (including the leading and trailing parentheses). This is <code>None</code> when the decorator does not have call arguments. This is deprecated in favor of arglist. For backwards compatibility, loaders may populate both the args and arglist fields.</p> <p></p> <p></p>"},{"location":"api/docspec/#arglist","title":"arglist","text":"<p>Decorator arguments, one item per argument. For keyword arguments, the keyword name and equals sign preceed the argument value expression code.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-argument","title":"Class Argument","text":"<pre><code>@dataclasses.dataclass\nclass Argument()\n</code></pre> <p>[view_source]</p> <p>Represents a Function argument.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-type","title":"Class Type","text":"<pre><code>class Type(enum.Enum)\n</code></pre> <p>[view_source]</p> <p>The type of the argument. This is currently very Python-centric, however most other languages should be able to represent the various argument types with a subset of these types without additions (e.g. Java or TypeScript only support <code>Positional</code> and <code>PositionalRemainder</code> arguments).</p> <p></p> <p></p>"},{"location":"api/docspec/#positional_only","title":"POSITIONAL_ONLY","text":"<p>A positional only argument. Such arguments are denoted in Python like this: <code>def foo(a, b, /): ...</code></p> <p></p> <p></p>"},{"location":"api/docspec/#positional","title":"POSITIONAL","text":"<p>A positional argument, which may also be given as a keyword argument. Basically that is just a normal argument as you would see most commonly in Python function definitions.</p> <p></p> <p></p>"},{"location":"api/docspec/#positional_remainder","title":"POSITIONAL_REMAINDER","text":"<p>An argument that denotes the capture of additional positional arguments, aka. \"args\" or \"varags\".</p> <p></p> <p></p>"},{"location":"api/docspec/#keyword_only","title":"KEYWORD_ONLY","text":"<p>A keyword-only argument is denoted in Python like thisL <code>def foo(*, kwonly): ...</code></p> <p></p> <p></p>"},{"location":"api/docspec/#keyword_remainder","title":"KEYWORD_REMAINDER","text":"<p>An argument that captures additional keyword arguments, aka. \"kwargs\".</p> <p></p> <p></p>"},{"location":"api/docspec/#location_2","title":"location","text":"<p>The location of the argument in the source code.</p> <p></p> <p></p>"},{"location":"api/docspec/#name_1","title":"name","text":"<p>The name of the argument.</p> <p></p> <p></p>"},{"location":"api/docspec/#type","title":"type","text":"<p>The argument type.</p> <p></p> <p></p>"},{"location":"api/docspec/#decorations","title":"decorations","text":"<p>A list of argument decorations. Python does not actually support decorators on function arguments like for example Java does. This is probably premature to add into the API, but hey, here it is.</p> <p></p> <p></p>"},{"location":"api/docspec/#datatype","title":"datatype","text":"<p>The datatype/type annotation of this argument as a code string.</p> <p></p> <p></p>"},{"location":"api/docspec/#default_value","title":"default_value","text":"<p>The default value of the argument as a code string.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-apiobject","title":"Class ApiObject","text":"<pre><code>@dataclasses.dataclass\nclass ApiObject()\n</code></pre> <p>[view_source]</p> <p>The base class for representing \"API Objects\". Any API object is any addressable entity in code, be that a variable/constant, function, class or module.</p> <p></p> <p></p>"},{"location":"api/docspec/#location_3","title":"location","text":"<p>The location of the API object, i.e. where it is sourced from/defined in the code.</p> <p></p> <p></p>"},{"location":"api/docspec/#name_2","title":"name","text":"<p>The name of the entity. This is usually relative to the respective parent of the entity, as opposed to it's fully qualified name/absolute name. However, that is more of a recommendation than rule. For example the <code>docspec_python</code> loader by default returns Module objects with their full module name (and does not create a module hierarchy).</p> <p></p> <p></p>"},{"location":"api/docspec/#docstring","title":"docstring","text":"<p>The documentation string of the API object.</p> <p></p> <p></p>"},{"location":"api/docspec/#parent","title":"parent","text":"<pre><code>@property\ndef parent() -&gt; t.Optional['HasMembers']\n</code></pre> <p>[view_source]</p> <p>Returns the parent of the HasMembers. Note that if you make any modifications to the API object tree, you will need to call sync_hierarchy() afterwards because adding to Class.members or Module.members does not automatically keep the parent property in sync.</p> <p></p> <p></p>"},{"location":"api/docspec/#path","title":"path","text":"<pre><code>@property\ndef path() -&gt; t.List['ApiObject']\n</code></pre> <p>[view_source]</p> <p>Returns a list of all of this API object's parents, from top to bottom. The list includes self as the last item.</p> <p></p> <p></p>"},{"location":"api/docspec/#sync_hierarchy","title":"sync_hierarchy","text":"<pre><code>def sync_hierarchy(parent: t.Optional['HasMembers'] = None) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Synchronize the hierarchy of this API object and all of it's children. This should be called when the HasMembers.members are updated to ensure that all child objects reference the right parent. Loaders are expected to return ApiObjects in a fully synchronized state such that the user does not have to call this method unless they are doing modifications to the tree.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-variablesemantic","title":"Class VariableSemantic","text":"<pre><code>class VariableSemantic(enum.Enum)\n</code></pre> <p>[view_source]</p> <p>A list of well-known properties and behaviour that can be attributed to a variable/constant.</p> <p></p> <p></p>"},{"location":"api/docspec/#instance_variable","title":"INSTANCE_VARIABLE","text":"<p>The Variable object is an instance variable of a class.</p> <p></p> <p></p>"},{"location":"api/docspec/#class_variable","title":"CLASS_VARIABLE","text":"<p>The Variable object is a static variable of a class.</p> <p></p> <p></p>"},{"location":"api/docspec/#constant","title":"CONSTANT","text":"<p>The Variable object represents a constant value.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-variable","title":"Class Variable","text":"<pre><code>@dataclasses.dataclass\nclass Variable(ApiObject)\n</code></pre> <p>[view_source]</p> <p>Represents a variable assignment (e.g. for global variables (often used as constants) or class members).</p> <p></p> <p></p>"},{"location":"api/docspec/#datatype_1","title":"datatype","text":"<p>The datatype associated with the assignment as code.</p> <p></p> <p></p>"},{"location":"api/docspec/#value","title":"value","text":"<p>The value of the variable as code.</p> <p></p> <p></p>"},{"location":"api/docspec/#modifiers","title":"modifiers","text":"<p>A list of language-specific modifiers that were used to declare this Variable object.</p> <p></p> <p></p>"},{"location":"api/docspec/#semantic_hints","title":"semantic_hints","text":"<p>A list of hints that express semantics of this Variable object which are not otherwise derivable from the context.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-indirection","title":"Class Indirection","text":"<pre><code>@dataclasses.dataclass\nclass Indirection(ApiObject)\n</code></pre> <p>[view_source]</p> <p>Represents an imported name. It can be used to properly find the full name target of a link written with a local name.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-functionsemantic","title":"Class FunctionSemantic","text":"<pre><code>class FunctionSemantic(enum.Enum)\n</code></pre> <p>[view_source]</p> <p>A list of well-known properties and behaviour that can be attributed to a function.</p> <p></p> <p></p>"},{"location":"api/docspec/#abstract","title":"ABSTRACT","text":"<p>The function is abstract.</p> <p></p> <p></p>"},{"location":"api/docspec/#final","title":"FINAL","text":"<p>The function is final.</p> <p></p> <p></p>"},{"location":"api/docspec/#coroutine","title":"COROUTINE","text":"<p>The function is a coroutine.</p> <p></p> <p></p>"},{"location":"api/docspec/#no_return","title":"NO_RETURN","text":"<p>The function does not return.</p> <p></p> <p></p>"},{"location":"api/docspec/#instance_method","title":"INSTANCE_METHOD","text":"<p>The function is an instance method.</p> <p></p> <p></p>"},{"location":"api/docspec/#class_method","title":"CLASS_METHOD","text":"<p>The function is a classmethod.</p> <p></p> <p></p>"},{"location":"api/docspec/#static_method","title":"STATIC_METHOD","text":"<p>The function is a staticmethod.</p> <p></p> <p></p>"},{"location":"api/docspec/#property_getter","title":"PROPERTY_GETTER","text":"<p>The function is a property getter.</p> <p></p> <p></p>"},{"location":"api/docspec/#property_setter","title":"PROPERTY_SETTER","text":"<p>The function is a property setter.</p> <p></p> <p></p>"},{"location":"api/docspec/#property_deleter","title":"PROPERTY_DELETER","text":"<p>The function is a property deleter.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-function","title":"Class Function","text":"<pre><code>@dataclasses.dataclass\nclass Function(ApiObject)\n</code></pre> <p>[view_source]</p> <p>Represents a function definition. This can be in a Module for plain functions or in a Class for methods. The decorations need to be introspected to understand if the function has a special purpose (e.g. is it a <code>@property</code>, <code>@classmethod</code> or <code>@staticmethod</code>?).</p> <p></p> <p></p>"},{"location":"api/docspec/#modifiers_1","title":"modifiers","text":"<p>A list of modifiers used in the function definition. For example, the only valid modifier in Python is \"async\".</p> <p></p> <p></p>"},{"location":"api/docspec/#args_1","title":"args","text":"<p>A list of the function arguments.</p> <p></p> <p></p>"},{"location":"api/docspec/#return_type","title":"return_type","text":"<p>The return type of the function as a code string.</p> <p></p> <p></p>"},{"location":"api/docspec/#decorations_1","title":"decorations","text":"<p>A list of decorations used on the function.</p> <p></p> <p></p>"},{"location":"api/docspec/#semantic_hints_1","title":"semantic_hints","text":"<p>A list of hints that describe the object.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-hasmembers","title":"Class HasMembers","text":"<pre><code>class HasMembers(ApiObject)\n</code></pre> <p>[view_source]</p> <p>Base class for API objects that can have members, e.g. Class and Module.</p> <p></p> <p></p>"},{"location":"api/docspec/#members","title":"members","text":"<p>The members of the API object.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-classsemantic","title":"Class ClassSemantic","text":"<pre><code>class ClassSemantic(enum.Enum)\n</code></pre> <p>[view_source]</p> <p>A list of well-known properties and behaviour that can be attributed to a class.</p> <p></p> <p></p>"},{"location":"api/docspec/#interface","title":"INTERFACE","text":"<p>The class describes an interface.</p> <p></p> <p></p>"},{"location":"api/docspec/#abstract_1","title":"ABSTRACT","text":"<p>The class is abstract.</p> <p></p> <p></p>"},{"location":"api/docspec/#final_1","title":"FINAL","text":"<p>The class is final.</p> <p></p> <p></p>"},{"location":"api/docspec/#enum","title":"ENUM","text":"<p>The class is an enumeration.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-class","title":"Class Class","text":"<pre><code>@dataclasses.dataclass\nclass Class(HasMembers)\n</code></pre> <p>[view_source]</p> <p>Represents a class definition.</p> <p></p> <p></p>"},{"location":"api/docspec/#metaclass","title":"metaclass","text":"<p>The metaclass used in the class definition as a code string.</p> <p></p> <p></p>"},{"location":"api/docspec/#bases","title":"bases","text":"<p>The list of base classes as code strings.</p> <p></p> <p></p>"},{"location":"api/docspec/#decorations_2","title":"decorations","text":"<p>A list of decorations used in the class definition.</p> <p></p> <p></p>"},{"location":"api/docspec/#members_1","title":"members","text":"<p>A list of the classes members. Functions in a class are to be considered instance methods of that class unless some information about the Function indicates otherwise.</p> <p></p> <p></p>"},{"location":"api/docspec/#modifiers_2","title":"modifiers","text":"<p>A list of language-specific modifiers that were used to declare this Variable object.</p> <p></p> <p></p>"},{"location":"api/docspec/#semantic_hints_2","title":"semantic_hints","text":"<p>A list of hints that describe the object.</p> <p></p> <p></p>"},{"location":"api/docspec/#class-module","title":"Class Module","text":"<pre><code>@dataclasses.dataclass\nclass Module(HasMembers)\n</code></pre> <p>[view_source]</p> <p>Represents a module, basically a named container for code/API objects. Modules may be nested in other modules. Be aware that for historical reasons, some loaders lile <code>docspec_python</code> by default do not return nested modules, even if nesting would be appropriate (and instead the <code>Module.name</code> simply contains the fully qualified name).</p> <p></p> <p></p>"},{"location":"api/docspec/#members_2","title":"members","text":"<p>A list of module members.</p> <p></p> <p></p>"},{"location":"api/docspec/#load_module","title":"load_module","text":"<pre><code>def load_module(source: t.Union[str, t.TextIO, t.Dict[str, t.Any]],\n                filename: t.Optional[str] = None,\n                loader: t.Callable[[t.IO[str]], t.Any] = json.load) -&gt; Module\n</code></pre> <p>[view_source]</p> <p>Loads a Module from the specified source, which may be either a filename, a file-like object to read from or plain structured data.</p> <p>Arguments</p> <ul> <li>source: The JSON source to load the module from.</li> <li>filename: The name of the source. This will be displayed in error   messages if the deserialization fails.</li> <li>loader: A function for loading plain structured data from a file-like   object. Defaults to <code>json.load()</code>.</li> </ul> <p>Returns</p> <p>The loaded <code>Module</code> object.</p> <p></p> <p></p>"},{"location":"api/docspec/#load_modules","title":"load_modules","text":"<pre><code>def load_modules(\n        source: t.Union[str, t.TextIO, t.Iterable[t.Any]],\n        filename: t.Optional[str] = None,\n        loader: t.Callable[[t.IO[str]],\n                           t.Any] = json.load) -&gt; t.Iterable[Module]\n</code></pre> <p>[view_source]</p> <p>Loads a stream of modules from the specified source. Similar to load_module(), the source can be a filename, file-like object or a list of plain structured data to deserialize from.</p> <p></p> <p></p>"},{"location":"api/docspec/#dump_module","title":"dump_module","text":"<pre><code>def dump_module(\n    module: Module,\n    target: t.Optional[t.Union[str, t.IO[str]]] = None,\n    dumper: t.Callable[[t.Any, t.IO[str]], None] = json.dump\n) -&gt; t.Optional[t.Dict[str, t.Any]]\n</code></pre> <p>[view_source]</p> <p>Dumps a module to the specified target or returns it as plain structured data.</p> <p></p> <p></p>"},{"location":"api/docspec/#filter_visit","title":"filter_visit","text":"<pre><code>def filter_visit(objects: t.MutableSequence[ApiObject],\n                 predicate: t.Callable[[ApiObject], bool],\n                 order: str = 'pre') -&gt; t.MutableSequence[ApiObject]\n</code></pre> <p>[view_source]</p> <p>Visits all objects recursively, applying the predicate in the specified order. If</p> <p>the predicate returrns <code>False</code>, the object will be removed from it's containing list.</p> <p>If an object is removed in pre-order, it's members will not be visited.</p> <p>Arguments:</p> <ul> <li><code>objects</code>: A list of objects to visit recursively. This list will be modified if the predicate returns <code>False</code> for an object.</li> <li><code>predicate</code>: The function to apply over all visited objects.</li> <li><code>order</code>: The order in which the objects are visited. The default order is <code>'pre'</code> in which case the predicate is called before visiting the object's members. The order may also be <code>'post'</code>.</li> </ul> <p></p> <p></p>"},{"location":"api/docspec/#visit","title":"visit","text":"<pre><code>def visit(objects: t.Sequence[ApiObject],\n          func: t.Callable[[ApiObject], t.Any],\n          order: str = 'pre') -&gt; None\n</code></pre> <p>[view_source]</p> <p>Visits all objects, applying func in the specified order.</p> <p></p> <p></p>"},{"location":"api/docspec/#get_member","title":"get_member","text":"<pre><code>def get_member(obj: ApiObject, name: str) -&gt; t.Optional[ApiObject]\n</code></pre> <p>[view_source]</p> <p>Generic function to retrieve a member from an API object. This will always return <code>None</code> for objects that don't support members (eg. Function and Variable).</p>"},{"location":"changelog/docspec-python/","title":"Docspec-Python Changelog","text":""},{"location":"changelog/docspec-python/#unreleased","title":"Unreleased","text":"TypeDescriptionPRIssuesAuthor Fix  Swap in `blib2to3` parser (bundled with the `black` package) for the stdlib `lib2to3` module in order to support `match` statements (PEP 634 - Structural Pattern Matching).80@nrser Improvement  add back `files` as a keyword-only argument to `load_python_modules()`75@NiklasRosenstein"},{"location":"changelog/docspec-python/#202-2022-07-18","title":"2.0.2 (2022-07-18)","text":"TypeDescriptionPRIssuesAuthor Fix  fix parsing trailing comma after keyword remainder argument in function definition (before it would accidentally consider the comma as a positional argument)@NiklasRosenstein"},{"location":"changelog/docspec-python/#201-2022-03-24","title":"2.0.1 (2022-03-24)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix `format_arglist()` for function signatures that contained a `POSITIONAL_REMAINDER` argument followed by a `KEYWORD_ONLY` (i.e. any other arguments besides `KEYWORD_REMAINDER`) to not yield an additional star (`*`)NiklasRosenstein/pydoc-markdown#255@NiklasRosenstein"},{"location":"changelog/docspec-python/#200a1-2022-02-24","title":"2.0.0a1 (2022-02-24)","text":"TypeDescriptionPRIssuesAuthor Feature  support PEP 420 namespace packages6254@NiklasRosenstein Improvement  support Path where a file system path is expected (e.g. `iter_package_files()`, `load_python_modules()`)6261@NiklasRosenstein Breaking change  `Docstring` class no longer inherits from `str` and is no longer frozen6449@NiklasRosenstein Breaking change  rename `Data` to `Variable`6867@NiklasRosenstein Hygiene  move `VariableSemantic`, `FunctionSemantic` and `ClassSemantic` into global scope69@NiklasRosenstein"},{"location":"changelog/docspec-python/#130-2022-02-23","title":"1.3.0 (2022-02-23)","text":"TypeDescriptionPRIssuesAuthor Fix  strip whitespace around `Class.bases`5553@NiklasRosenstein Tests  add `test_funcdef_7_posonly_args` unit test to test various more combinations of function arguments, including `POSITIONAL_ONLY`)5857@NiklasRosenstein, @tristanlatr Refactor  use `nr.util.scanner.Scanner` instead of homebrew `ListScanner` class58@NiklasRosenstein Fix  fix parsing of positional only arguments5857@NiklasRosenstein"},{"location":"changelog/docspec-python/#120-2021-09-24","title":"1.2.0 (2021-09-24)","text":"TypeDescriptionPRIssuesAuthor Feature  add `format_arglist(render_type_hints)` argument@NiklasRosenstein"},{"location":"changelog/docspec-python/#111-2021-08-27","title":"1.1.1 (2021-08-27)","text":"TypeDescriptionPRIssuesAuthor Fix  support imports on the class-level34@NiklasRosenstein"},{"location":"changelog/docspec-python/#110-2021-08-27","title":"1.1.0 (2021-08-27)","text":"TypeDescriptionPRIssuesAuthor Feature  add support for the `Docstring` class now used in `ApiObject.docstring` since `docspec 1.1.0`@NiklasRosenstein Feature  add support for `Indirection`s (from parsed Python imports)@NiklasRosenstein"},{"location":"changelog/docspec-python/#100-2021-07-21","title":"1.0.0 (2021-07-21)","text":"TypeDescriptionPRIssuesAuthor Breaking change  Migrate to using `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databind.json`.@NiklasRosenstein Fix  fix parsing of lib2to3 syntax tree if class does not have a suite (e.g., \"pass\" on the same line as the class definition)@NiklasRosenstein"},{"location":"changelog/docspec-python/#020-2021-05-29","title":"0.2.0 (2021-05-29)","text":"TypeDescriptionPRIssuesAuthor Improvement  republish 0.1.1 as 0.2.0@NiklasRosenstein"},{"location":"changelog/docspec-python/#011-2021-05-21","title":"0.1.1 (2021-05-21)","text":"TypeDescriptionPRIssuesAuthor Improvement  update type hints, use `@dataclass` over `nr.sumtype` which has MyPy support@NiklasRosenstein Fix  fix `discover()` to ignore Python files with more than one dot in it@NiklasRosenstein"},{"location":"changelog/docspec-python/#010-2021-02-20","title":"0.1.0 (2021-02-20)","text":"TypeDescriptionPRIssuesAuthor Fix  Fix `NameError` in function type annotation@NiklasRosenstein Feature  add `encoding` parameter to `load_python_modules()` and `parse_python_module()`@NiklasRosenstein"},{"location":"changelog/docspec-python/#007-2020-07-16","title":"0.0.7 (2020-07-16)","text":"TypeDescriptionPRIssuesAuthor Tests  fix test cases@NiklasRosenstein Improvement  no longer use `pkgutil.find_loader()` to find Python modules as it prefers modules that are already in `sys.modules` even if that instance of the module would not occurr in the specified `search_path`. `docspec_python.find_module()` now re-implements the search mechanism@NiklasRosenstein Tests  add tests for Python module loader logic@NiklasRosenstein Fix  fix support for Python 3.5@NiklasRosenstein"},{"location":"changelog/docspec-python/#006-2020-07-16","title":"0.0.6 (2020-07-16)","text":"TypeDescriptionPRIssuesAuthor Fix  fix `iter_package_files()` which would not respect the `search_path` argument@NiklasRosenstein"},{"location":"changelog/docspec-python/#005-2020-07-06","title":"0.0.5 (2020-07-06)","text":"TypeDescriptionPRIssuesAuthor Improvement  Update calls to `ApiObject` subclasses to pass keyword arguments only (as is required in `docspec &gt;=0.2.0`)@NiklasRosenstein Fix  Fix derivation of Python module name from name of file on disk (before it would accidentally strip trailing p's or y's from the name).@NiklasRosenstein"},{"location":"changelog/docspec/","title":"Docspec Changelog","text":""},{"location":"changelog/docspec/#200a1-2022-02-24","title":"2.0.0a1 (2022-02-24)","text":"TypeDescriptionPRIssuesAuthor Fix  update `specification.yml` to show correct types of `Argument.location`, `Decoration.location` and `Module.location`5652@NiklasRosenstein Breaking change  remove deprecated class `ReverseMap`63@NiklasRosenstein Breaking change  `Docstring` class no longer inherits from `str` and is no longer frozen6449@NiklasRosenstein Breaking change  rename `Data` to `Variable`6867@NiklasRosenstein Hygiene  move `VariableSemantic`, `FunctionSemantic` and `ClassSemantic` into global scope@NiklasRosenstein Improvement  `filter_visit()` and `visit()` now expect a `MutableSequence` instead of `List`@NiklasRosenstein Hygiene  remove `files` argument from `load_python_modules()`@NiklasRosenstein Improvement  declare two overloads for `parse_python_module()` for reading from a filename or a file-like object@NiklasRosenstein Breaking change  `Location.filename` is no longer optional as per the specification@NiklasRosenstein Breaking change  harden requirements of spec by requiring a `location` even on `Decoration` and `Argument` objects, and the location is no longer optional. Rearrange the argument the Python classes such that the `location` argument comes first, always70@NiklasRosenstein Breaking change  remove `file` argument from `docspec-python` CLI70@NiklasRosenstein"},{"location":"changelog/docspec/#120-2021-09-24","title":"1.2.0 (2021-09-24)","text":"TypeDescriptionPRIssuesAuthor Feature  add `Data.modifiers`, `Data.semantic_hints`, `Class.modifiers`, `Class.semantic_hints` and `Function.semantic_hints`30@NiklasRosenstein Improvement  rename `Argument.Type` enumeration values to `UPPER_CASE` format according to latest specification (full backwards compatibility, including deserializing JSON payloads with the old argument type names)@NiklasRosenstein Feature  add `Argument.location` and `Decoration.location` properties28@NiklasRosenstein Feature  add `Location.endlineno` property to spec32@NiklasRosenstein Improvement  add `Decoration.arglist`, document that `Decoration.args` is deprecated@NiklasRosenstein"},{"location":"changelog/docspec/#110-2021-08-27","title":"1.1.0 (2021-08-27)","text":"TypeDescriptionPRIssuesAuthor Feature  add `ApiObject.parent` and `ApiObject.path` to deprecate `ReverseMap` class@NiklasRosenstein Feature  add `ApiObject.sync_hierarchy()` method@NiklasRosenstein Feature  introduce `HasMembers` base class for `Class` and `Module`, `Module.members` can now container other modules15@NiklasRosenstein Improvement  `get_member()` and `filter_visit()` have been updated to make use of the `HasMembers` base class instead of relying on `hasattr()`/`getattr()`@NiklasRosenstein Feature  add `Indirection` class to keep track of imports and resolve names correctly.@tristanlatr Feature  add `Docstring` class which represents the docstring, plus the location of the docstring@NiklasRosenstein"},{"location":"changelog/docspec/#102-2021-07-29","title":"1.0.2 (2021-07-29)","text":"TypeDescriptionPRIssuesAuthor Fix  Add some type annotations14@tristanlatr"},{"location":"changelog/docspec/#101-2021-07-22","title":"1.0.1 (2021-07-22)","text":"TypeDescriptionPRIssuesAuthor Fix  `docspec.get_members()` access object members wrong@NiklasRosenstein"},{"location":"changelog/docspec/#100-2021-07-21","title":"1.0.0 (2021-07-21)","text":"TypeDescriptionPRIssuesAuthor Breaking change  Migrate to using `databind.core 1.x` and `databind.json 1.x` from `nr.databind.core` and `nr.databind.json`.@NiklasRosenstein"},{"location":"changelog/docspec/#021-2021-02-21","title":"0.2.1 (2021-02-21)","text":"TypeDescriptionPRIssuesAuthor Fix  fix dependencies@NiklasRosenstein"},{"location":"changelog/docspec/#020-2020-07-06","title":"0.2.0 (2020-07-06)","text":"TypeDescriptionPRIssuesAuthor Improvement  `ApiObject` constructors now accept keyword arguments only@NiklasRosenstein Improvement  All `nullable` fields now have `default=None`@NiklasRosenstein Improvement  Many serializable classes are now decorated with `SkipDefaults()`@NiklasRosenstein"}]}